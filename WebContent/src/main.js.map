{"version":3,"sources":["main.js","../ts/src/App.ts","../ts/src/FitScaleManager.ts","../ts/src/core/Gameplay.ts","../ts/src/scene/Boot.ts","../ts/src/scene/MainScene.ts","../ts/src/scene/Preloader.ts","../ts/src/screen/AreYouSureWindow.ts","../ts/src/screen/CompleteWindow.ts","../ts/src/screen/GameplayScreen.ts","../ts/src/screen/InstructionPage.ts","../ts/src/screen/TryAgainWindow.ts"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","toString","call","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Date","getPrototypeOf","game","ctb","App","_Phaser$Game","Phaser","Game","_super","_this","config","type","AUTO","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","parent","dom","createContainer","scale","mode","FitScaleManager","detectBestScaleMode","autoCenter","Scale","CENTER_BOTH","transparent","scene","add","Boot","window","onload","delayedCalls","delayedCall","delay","callback","args","callbackScope","getAt","dc","time","push","t","setTimeout","pauseAllDelayedCalls","_step","_iterator","Time","TimerEvent","paused","resumeAllDelayedCalls","_step2","_iterator2","destroyAllDelayedCalls","_step3","_iterator3","remove","clearTimeout","destroyDelayedCall","ind","indexOf","splice","setPageBackground","bg","document","querySelector","style","backgroundImage","setupButton","btn","frame","on","setFrame","sound","play","setupButtonTextureBased","texture","hoverTexture","setTexture","playBtnClickAnim","sc","hasOwnProperty","scaleX","scaleY","tweens","targets","duration","yoyo","_this2","doResize","calculateScale","newCanvasWidth","phaserScaleManager","newCanvasHeight","canvasStyle","marginLeft","innerWidth","marginTop","innerHeight","canvas","addListener","Events","RESIZE","onResize","overridePhaserTransformMethods","scaleMode","NONE","Math","min","_this3","transformX","pageX","parseInt","split","transformY","pageY","RESIZE_DELAY","iOS","navigator","platform","isAndroid","userAgent","toLowerCase","FIT","core","Gameplay","currentRound","correctAnswersCount","wrongAnswersCount","correctAnswersCountThisRound","wrongAnswersCountThisRound","onNewRound","nextLetterDelay","failsNumToLose","Number","cache","json","get","useImages","Boolean","onComplete","onLose","totalRoundsNum","score","calculateScore","nextLetter","_this4","fn","currentWordData","Utils","RemoveRandomElement","words","onLetterChosen","getCurrentTotalAnswersCountThisRound","setupCallbacks","allWorlds","_Phaser$Scene","Scene","_super2","_this5","offsetLeft","parentElement","displayScale","x","offsetTop","y","Preloader","MainScene","_Phaser$Scene2","_super3","gameplay","gameplayScreen","screen","GameplayScreen","children","showInstructionPage","_Phaser$Scene3","_super4","load","_this6","_step4","_iterator4","w","image","_step5","_iterator5","audio","progressTxt","text","fontFamily","fontSize","color","align","setOrigin","pack","ceil","nextScene","start","animKey","sprite","undefined","mainScene","getScene","anims","exists","data","ANIMS_DATA","frames","generateFrameNames","end","zeroPad","prefix","suffix","frameRate","repeat","currentAnim","off","stop","once","bubble_poping","padNum","atlas","turtle_idle","turtle_shock","AreYouSureWindow","_Phaser$GameObjects$C","GameObjects","Container","_super5","onYes","onNo","_this7","_areYouSurePage","Image","setInteractive","_btnSureYes","cursor","_btnSureNo","CompleteWindow","_Phaser$GameObjects$C2","_super6","onBack","onReplay","onNext","_this8","music","setPosition","_bgComplete","_cup","_btnBack","_btnReplay","_btnNext","_CollectedPoints","totalScoreTxt","stroke","strokeThickness","grd","context","createLinearGradient","addColorStop","setFill","starScoreTxt","starScore","ease","Easing","Back","Out","String","_Phaser$GameObjects$C3","_super7","_this9","bgMusic","correctAudio","idleDelayedCall","playIdle","playAnim","character","floor","random","soundGooseYes","soundWrongDrop","wfsnd","showCompleteWindow","completeWindow","destroyGameplay","setInputEnabled","show","showLoseWindow","timerEvent","destroy","tryAgainWindow","TryAgainWindow","_gameStage","setScale","_btnClose","onCloseClick","_btnSound","onSoundClick","areYouSureWindow","parentContainer","pause","playCorrectAudio","_this10","loop","gameplayContainer","addAt","getIndex","reset","createRounds","prepareRound","_this11","removeAll","randomized","positions","txt","fixedHeight","setText","alpha","addIdleAnim","_step6","_iterator6","_loop","word","setSize","onCorrectAnswer","showPopBubble","fadeBubblesOut","tfCorrectAnswerCount","lost","onWrongAnswer","shakeBubble","tfWrongAnswerCount","pixelPerfect","tfTimer","renderTimer","addEvent","repeatCount","seconds","sec","round","_step7","_iterator7","bubble","_step8","_iterator8","_this12","isNewRound","isRoundsComplete","fadeBubblesIn","showOut","getCurrentTotalAnswersCount","completed","showAreYouSurePage","_this13","playInstructionSound","instructionPage","InstructionPage","showGameplay","_this14","pauseAll","pauseSounds","resumeAll","unpauseSounds","enabled","_step9","_iterator9","_step10","_iterator10","disableInteractive","stopAll","_Phaser$GameObjects$C4","_super8","onPlayClick","onSndClick","_this15","_instructionPage","_instructionPageTitle","_btnPlay","instrTxt","setWordWrapWidth","setLineSpacing","_btnSoundInstruction","_Phaser$GameObjects$C5","_super9","_this16","_bg","_star"],"mappings":"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","file":"main.js","sourcesContent":["var ctb;\n(function (ctb) {\n    class App extends Phaser.Game {\n        constructor() {\n            let config = {\n                type: Phaser.AUTO,\n                width: App.CANVAS_WIDTH,\n                height: App.CANVAS_HEIGHT,\n                parent: 'game-container',\n                dom: {\n                    createContainer: false\n                },\n                scale: {\n                    mode: FitScaleManager.detectBestScaleMode(),\n                    autoCenter: Phaser.Scale.CENTER_BOTH\n                },\n                transparent: true,\n                scene: {\n                    create: () => {\n                        this.scene.add('Boot', ctb.scene.Boot, true);\n                    }\n                }\n            };\n            super(config);\n        }\n    }\n    App.CANVAS_WIDTH = 980;\n    App.CANVAS_HEIGHT = 600;\n    ctb.App = App;\n})(ctb || (ctb = {}));\nlet game;\nwindow.onload = () => {\n    game = new ctb.App();\n};\nlet delayedCalls = [];\nfunction delayedCall(delay, callback, args, callbackScope) {\n    let scene = game.scene.getAt(0);\n    if (scene) {\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\n        delayedCalls.push(dc);\n        return dc;\n    }\n    let t = setTimeout(callback, delay);\n    delayedCalls.push(t);\n    return t;\n}\nfunction pauseAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = true;\n        }\n    }\n}\nfunction resumeAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = false;\n        }\n    }\n}\nfunction destroyAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.remove(false);\n        }\n        else {\n            clearTimeout(dc);\n        }\n    }\n    delayedCalls = [];\n}\nfunction destroyDelayedCall(dc) {\n    if (dc instanceof Phaser.Time.TimerEvent) {\n        dc.remove(false);\n    }\n    else {\n        clearTimeout(dc);\n    }\n    let ind = delayedCalls.indexOf(dc);\n    if (ind >= 0)\n        delayedCalls.splice(ind, 1);\n}\nfunction setPageBackground(bg) {\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\n}\nfunction setupButton(btn, frame) {\n    btn.on('pointerdown', () => { btn.setFrame(frame + '_hover' + '0000'); });\n    btn.on('pointerover', () => { btn.setFrame(frame + '_hover' + '0000'); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setFrame(frame + '0000'); });\n    btn.on('pointerup', () => { btn.setFrame(frame + '0000'); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction setupButtonTextureBased(btn, texture, hoverTexture) {\n    btn.on('pointerdown', () => { btn.setTexture(hoverTexture); });\n    btn.on('pointerover', () => { btn.setTexture(hoverTexture); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setTexture(texture); });\n    btn.on('pointerup', () => { btn.setTexture(texture); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction playBtnClickAnim(target) {\n    let sc = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\n    target.scaleX = target.scaleY = sc;\n    let scene = game.scene.getAt(0);\n    scene.tweens.add({\n        targets: target,\n        \"scaleX\": 0.9 * sc,\n        \"scaleY\": 0.9 * sc,\n        duration: 100,\n        yoyo: true\n    });\n}\n/**\n * @author Roman Parada\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\n *\n * How to use:\n * Just call the code line below in Boot scene's init() method of your project:\n * new FitScaleManager(this.game).setup();\n */\nclass FitScaleManager {\n    constructor(game) {\n        this.doResize = () => {\n            let scale = this.calculateScale();\n            let newCanvasWidth = this.phaserScaleManager.width * scale;\n            let newCanvasHeight = this.phaserScaleManager.height * scale;\n            this.canvasStyle.width = newCanvasWidth + 'px';\n            this.canvasStyle.height = newCanvasHeight + 'px';\n            this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\n            this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\n        };\n        this.game = game;\n        this.canvasStyle = this.game.canvas.style;\n        this.phaserScaleManager = this.game.scale;\n    }\n    static detectBestScaleMode() {\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\n    }\n    ;\n    /**\n     * Just call this method once in Boot scene's init() method\n     */\n    setup() {\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\n        this.overridePhaserTransformMethods();\n        this.onResize();\n    }\n    calculateScale() {\n        if (game.scale.scaleMode == Phaser.Scale.NONE)\n            return 1;\n        return Math.min(window.innerWidth / this.phaserScaleManager.width, window.innerHeight / this.phaserScaleManager.height);\n    }\n    overridePhaserTransformMethods() {\n        this.game.scale.transformX = (pageX) => {\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\n        };\n        this.game.scale.transformY = (pageY) => {\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\n        };\n    }\n    onResize() {\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\n    }\n}\nFitScaleManager.RESIZE_DELAY = 500;\nvar ctb;\n(function (ctb) {\n    var core;\n    (function (core) {\n        class Gameplay {\n            constructor() {\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n                this.onNewRound = null;\n                this.nextLetterDelay = 0;\n                this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\n                this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\n            }\n            setupCallbacks(onComplete, onLose, onNewRound) {\n                this.onComplete = onComplete;\n                this.onLose = onLose;\n                this.onNewRound = onNewRound;\n            }\n            calculateScore() {\n                return this.totalRoundsNum - this.wrongAnswersCount;\n            }\n            onLetterChosen() {\n                if (this.correctAnswersCountThisRound == 1) {\n                    this.currentRound++;\n                    if (this.currentRound >= this.totalRoundsNum) {\n                        let score = this.calculateScore();\n                        this.onComplete(score, score);\n                        return true;\n                    }\n                    else {\n                        this.nextLetter();\n                    }\n                }\n                return false;\n            }\n            nextLetter() {\n                let fn = () => {\n                    this.currentWordData = Phaser.Utils.Array.RemoveRandomElement(this.words);\n                    this.correctAnswersCountThisRound = 0;\n                    this.wrongAnswersCountThisRound = 0;\n                    if (this.onNewRound)\n                        this.onNewRound();\n                };\n                if (this.nextLetterDelay == 0) {\n                    fn();\n                }\n                else {\n                    delayedCall(this.nextLetterDelay, fn);\n                }\n            }\n            onCorrectAnswer() {\n                this.correctAnswersCount++;\n                this.correctAnswersCountThisRound++;\n                this.nextLetterDelay = 3500;\n                return this.onLetterChosen();\n            }\n            onWrongAnswer() {\n                this.wrongAnswersCount++;\n                this.wrongAnswersCountThisRound++;\n                this.nextLetterDelay = 0;\n                if (this.wrongAnswersCount >= this.failsNumToLose) {\n                    this.onLose(0, 0);\n                    return true;\n                }\n                else {\n                    this.onLetterChosen();\n                }\n                return false;\n            }\n            getCurrentTotalAnswersCount() {\n                return this.correctAnswersCount + this.wrongAnswersCount;\n            }\n            getCurrentTotalAnswersCountThisRound() {\n                return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\n            }\n            isNewRound() {\n                return this.getCurrentTotalAnswersCountThisRound() == 0;\n            }\n            isRoundsComplete() {\n                return this.currentRound >= this.totalRoundsNum;\n            }\n            reset() {\n                this.nextLetterDelay = 0;\n                this.setupCallbacks(null, null, null);\n                let json = game.cache.json.get('gameplay');\n                this.words = json[\"words\"].slice();\n                this.allWorlds = json[\"words\"].slice();\n                this.totalRoundsNum = this.words.length;\n                this.nextLetter();\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n        }\n        core.Gameplay = Gameplay;\n    })(core = ctb.core || (ctb.core = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Boot extends Phaser.Scene {\n            init() {\n                this.game.scale.transformX = (pageX) => {\n                    let offsetLeft = 0;\n                    let parentElement = game.canvas.parentElement;\n                    while (parentElement) {\n                        if (parentElement.offsetLeft) {\n                            offsetLeft = parentElement.offsetLeft;\n                            break;\n                        }\n                        parentElement = parentElement.parentElement;\n                    }\n                    return (pageX - offsetLeft) * this.game.scale.displayScale.x;\n                };\n                this.game.scale.transformY = (pageY) => {\n                    let offsetTop = 0;\n                    let parentElement = game.canvas.parentElement;\n                    while (parentElement) {\n                        if (parentElement.offsetTop) {\n                            offsetTop = parentElement.offsetTop;\n                            break;\n                        }\n                        parentElement = parentElement.parentElement;\n                    }\n                    return (pageY - offsetTop) * this.game.scale.displayScale.y;\n                };\n            }\n            create() {\n                game.scene.remove('Boot');\n                game.scene.add('Preloader', ctb.scene.Preloader, true);\n            }\n        }\n        scene.Boot = Boot;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        var Gameplay = ctb.core.Gameplay;\n        class MainScene extends Phaser.Scene {\n            create() {\n                this.gameplay = new Gameplay();\n                this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\n                this.children.add(this.gameplayScreen);\n                this.gameplayScreen.showInstructionPage();\n            }\n        }\n        scene.MainScene = MainScene;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Preloader extends Phaser.Scene {\n            preload() {\n                this.load.json('gameplay', 'assets/json/gameplay.json');\n            }\n            create() {\n                let json = game.cache.json.get('gameplay');\n                if (json[\"useImages\"]) {\n                    for (let w of json[\"words\"]) {\n                        this.load.image(w[\"letterName\"], \"assets/imgs/words/\" + w[\"imageKey\"] + \".png\");\n                    }\n                }\n                for (let w of json[\"words\"]) {\n                    this.load.audio(w[\"audioKey\"], \"assets/sound/mp3/words/\" + w[\"audioKey\"] + \".mp3\");\n                }\n                let progressTxt = this.add.text(game.scale.width / 2, game.scale.height / 2, \"\", {\n                    \"fontFamily\": \"Quran Era font\",\n                    \"fontSize\": 25,\n                    \"color\": \"#000000\",\n                    \"align\": 'center'\n                });\n                progressTxt.setOrigin(0.5, 0.5);\n                this.load.pack('preloader', 'assets/pack.json');\n                this.load.on('progress', (value) => {\n                    progressTxt.text = Math.ceil(value * 100) + \"%\";\n                }, this);\n                this.load.on('complete', () => {\n                    this.nextScene();\n                });\n                this.load.start();\n            }\n            static playAnim(animKey, sprite, onComplete = null) {\n                let mainScene = game.scene.getScene('ScreenMain');\n                if (!mainScene.anims.exists(animKey)) {\n                    let data = Preloader.ANIMS_DATA[animKey];\n                    mainScene.anims.create({\n                        key: animKey,\n                        frames: mainScene.anims.generateFrameNames(data['atlas'], {\n                            start: data['start'], end: data['end'], zeroPad: data['padNum'],\n                            prefix: data['prefix'], suffix: ''\n                        }),\n                        frameRate: data['frameRate'],\n                        repeat: data['repeat']\n                    });\n                }\n                if (sprite.anims.currentAnim) {\n                    sprite.anims.currentAnim.off('complete');\n                }\n                sprite.anims.stop();\n                sprite.play(animKey);\n                sprite.anims.currentAnim.once('complete', () => {\n                    if (onComplete)\n                        onComplete();\n                });\n                return sprite;\n            }\n            nextScene() {\n                game.scene.remove('Preloader');\n                game.scene.add('ScreenMain', ctb.scene.MainScene, true);\n            }\n        }\n        Preloader.ANIMS_DATA = {\n            'bubble_poping': {\n                'start': 0,\n                'end': 26,\n                'padNum': 4,\n                'prefix': 'bubble_poping',\n                'repeat': 0,\n                'frameRate': 24,\n                'atlas': 'bubble-atlas'\n            },\n            'turtle_idle': {\n                'start': 0,\n                'end': 35,\n                'padNum': 4,\n                'prefix': 'turtle_idle',\n                'repeat': 0,\n                'frameRate': 24,\n                'atlas': 'turtle-idle-atlas'\n            },\n            'turtle_shock': {\n                'start': 0,\n                'end': 36,\n                'padNum': 4,\n                'prefix': 'turtle_shock',\n                'repeat': 0,\n                'frameRate': 24,\n                'atlas': 'turtle_shock-atlas'\n            },\n        };\n        scene.Preloader = Preloader;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class AreYouSureWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onYes, onNo) {\n                super(scene);\n                this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0 - 48, 'Exit warning');\n                this._areYouSurePage.setOrigin(0, 0);\n                this._areYouSurePage.setInteractive();\n                this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485 - 50, 'btnYES1');\n                this._btnSureYes.setInteractive({ cursor: 'pointer' });\n                this._btnSureYes.once('pointerup', onYes);\n                setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\n                this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485 - 50, 'btnNO1');\n                this._btnSureNo.setInteractive({ cursor: 'pointer' });\n                this._btnSureNo.once('pointerup', onNo);\n                setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\n                this.add(this._areYouSurePage);\n                this.add(this._btnSureYes);\n                this.add(this._btnSureNo);\n            }\n        }\n        screen.AreYouSureWindow = AreYouSureWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class CompleteWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay, onNext) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-104.5, -48);\n                this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\n                this._bgComplete.setOrigin(0, 0);\n                this._bgComplete.setInteractive();\n                this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\n                this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\n                let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\n                this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bgComplete,\n                    _CollectedPoints,\n                    this._cup,\n                    this._btnBack,\n                    this._btnReplay,\n                    this._btnNext,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n                this._btnNext.setInteractive({ cursor: 'pointer' });\n                this._btnNext.on('pointerup', () => {\n                    onNext(this._btnNext);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\n            }\n            show(score, starScore) {\n                this._cup.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._cup,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                // let music = this.scene.sound.add(\"viktory\");\n                this.music = this.scene.sound.add(\"Activity completion fantastic\");\n                this.music.play();\n            }\n        }\n        screen.CompleteWindow = CompleteWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        var Preloader = ctb.scene.Preloader;\n        class GameplayScreen extends Phaser.GameObjects.Container {\n            constructor(scene, gameplay) {\n                super(scene);\n                this.bgMusic = null;\n                this.correctAudio = null;\n                this.idleDelayedCall = null;\n                this.playIdle = () => {\n                    Preloader.playAnim('turtle_idle', this.character, () => {\n                        this.idleDelayedCall = delayedCall(Math.floor(Math.random() * 5) * 500, this.playIdle);\n                    });\n                };\n                this.soundGooseYes = null;\n                this.soundWrongDrop = null;\n                this.wfsnd = null;\n                this.showCompleteWindow = (score, starScore) => {\n                    let completeWindow = new screen.CompleteWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(completeWindow);\n                        this.showInstructionPage();\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(2000, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(completeWindow);\n                        completeWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.showLoseWindow = (score, starScore) => {\n                    this.timerEvent.destroy();\n                    let tryAgainWindow = new screen.TryAgainWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(tryAgainWindow);\n                        this.showInstructionPage();\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(1500, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(tryAgainWindow);\n                        tryAgainWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.gameplay = gameplay;\n                window[\"gs\"] = this;\n                this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\n                this._gameStage.setOrigin(0.5, 0.5);\n                this._gameStage.setScale(1.02);\n                this._gameStage.setInteractive();\n                this.add(this._gameStage);\n                this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025 - 105, 100 - 50, 'x Button');\n                this._btnClose.setInteractive({ cursor: 'pointer' });\n                this._btnClose[\"defScale\"] = this._btnClose.scale;\n                setupButtonTextureBased(this._btnClose, 'x Button', 'x Button HOVER EFFECT');\n                this.add(this._btnClose);\n                this._btnClose.on('pointerup', () => {\n                    playBtnClickAnim(this._btnClose);\n                    this.onCloseClick();\n                });\n                this._btnSound = new Phaser.GameObjects.Image(this.scene, 160 - 105, 100 - 50, 'Sound');\n                this._btnSound.setInteractive({ cursor: 'pointer' });\n                this._btnSound[\"defScale\"] = this._btnSound.scale;\n                setupButtonTextureBased(this._btnSound, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._btnSound);\n                this._btnSound.on('pointerup', () => {\n                    playBtnClickAnim(this._btnSound);\n                    this.onSoundClick();\n                });\n            }\n            playCorrectAudio() {\n                if (this.correctAudio) {\n                    this.correctAudio.stop();\n                }\n                this.correctAudio = this.scene.sound.add(this.gameplay.currentWordData[\"word\"]);\n                this.correctAudio.play();\n                if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                    this.correctAudio.pause();\n                }\n            }\n            onSoundClick() {\n                this.playCorrectAudio();\n            }\n            showGameplay() {\n                setPageBackground(\"bg-australia\");\n                this.bgMusic = this.scene.sound.add(\"Bachground ambience\");\n                this.bgMusic.play();\n                this.bgMusic.loop = true;\n                this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\n                this.addAt(this.gameplayContainer, this.getIndex(this._btnClose));\n                this.gameplay.reset();\n                this.createRounds();\n                this.prepareRound();\n                this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, () => {\n                    this.onNewRound(true);\n                });\n            }\n            createRounds() {\n                this.gameplayContainer.removeAll();\n                this.character = this.scene.add.sprite(205, 435, null);\n                this.playIdle();\n                this.gameplayContainer.add(this.character);\n                let randomized = this.gameplay.allWorlds.slice(); //Phaser.Utils.Array.Shuffle(this.gameplay.allWorlds.slice());\n                this.words = [];\n                let positions = [\n                    { x: 68, y: 174 }, { x: 235, y: 72 }, { x: 461, y: 98 }, { x: 367, y: 253 }, { x: 674, y: 52 }, { x: 605, y: 226 }, { x: 429, y: 416 }, { x: 654, y: 390 }\n                ];\n                for (let i = 0; i < randomized.length; i++) {\n                    let w = new Phaser.GameObjects.Container(this.scene, positions[i]['x'] + 20 + 83, positions[i]['y'] + 23 + 65);\n                    w.add(w[\"-image-\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Bubble'));\n                    w[\"-image-\"].setOrigin(0.5, 0.5);\n                    this.words.push(w);\n                    let txt;\n                    if (this.gameplay.useImages) {\n                        txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomized[i][\"imageKey\"]);\n                        w.add(txt);\n                    }\n                    else {\n                        txt = this.scene.add.text(0, -5, \"\", {\n                            \"fontFamily\": \"Quran Era font\",\n                            \"fontSize\": 55,\n                            \"color\": \"#000000\",\n                            \"align\": 'center'\n                        });\n                        txt.setOrigin(0.5, 0.5);\n                        txt.style.fixedHeight = 75;\n                        txt.setText(randomized[i][\"word\"]);\n                        w.add(txt);\n                    }\n                    w.alpha = 0;\n                    w[\"-letter-\"] = txt;\n                    w[\"-word-text-\"] = randomized[i][\"word\"];\n                    this.gameplayContainer.add(w);\n                    this.addIdleAnim(w);\n                }\n                for (let word of this.words) {\n                    word.setSize(word[\"-image-\"].width, word[\"-image-\"].height);\n                    word.setInteractive({ cursor: 'pointer' });\n                    word.on('pointerdown', () => {\n                        this.setInputEnabled(false);\n                        if (word[\"-word-text-\"] == this.gameplay.currentWordData[\"word\"]) {\n                            this.onCorrectAnswer();\n                            this.showPopBubble(word);\n                            this.fadeBubblesOut();\n                            this.tfCorrectAnswerCount.setText(String(this.gameplay.correctAnswersCount));\n                        }\n                        else {\n                            let lost = this.onWrongAnswer();\n                            this.shakeBubble(word);\n                            delayedCall(550, () => {\n                                if (!lost) {\n                                    this.setInputEnabled(true);\n                                }\n                            });\n                            this.tfWrongAnswerCount.setText(String(this.gameplay.wrongAnswersCount));\n                        }\n                    });\n                }\n                this._btnClose.setInteractive({ cursor: 'pointer', pixelPerfect: true });\n                this.setInputEnabled(false);\n                this.tfCorrectAnswerCount = this.scene.add.text(game.scale.width / 2 - 118, 29, \"0\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 20,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.gameplayContainer.add(this.tfCorrectAnswerCount);\n                this.tfWrongAnswerCount = this.scene.add.text(game.scale.width / 2 - 26, 29, \"0\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 20,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.gameplayContainer.add(this.tfWrongAnswerCount);\n                this.tfTimer = this.scene.add.text(game.scale.width / 2 + 73, 29, \"00:00\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 20,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.gameplayContainer.add(this.tfTimer);\n                let seconds = 90;\n                this.renderTimer(seconds);\n                this.timerEvent = this.scene.time.addEvent({ delay: 1000, repeat: seconds });\n                this.timerEvent.callback = () => {\n                    if (this.timerEvent.repeatCount == 0) {\n                        this.showLoseWindow(0, 0);\n                    }\n                    this.renderTimer(this.timerEvent.repeatCount);\n                };\n            }\n            renderTimer(seconds) {\n                let sec = seconds % 60;\n                let min = Math.round((seconds - sec) / 60);\n                this.tfTimer.setText((min < 10 ? '0' + min : min)\n                    + \":\" +\n                    (sec < 10 ? '0' + sec : sec));\n            }\n            fadeBubblesIn() {\n                for (let bubble of this.words) {\n                    this.scene.tweens.add({\n                        targets: bubble,\n                        alpha: 1,\n                        duration: 1000\n                    });\n                }\n            }\n            fadeBubblesOut() {\n                for (let bubble of this.words) {\n                    this.scene.tweens.add({\n                        targets: bubble,\n                        alpha: 0,\n                        duration: 1000\n                    });\n                }\n            }\n            showPopBubble(bubble) {\n                let bubble_poping = this.scene.add.sprite(bubble.x, bubble.y, null);\n                this.gameplayContainer.add(bubble_poping);\n                Preloader.playAnim('bubble_poping', bubble_poping, () => {\n                    if (bubble_poping.parentContainer)\n                        bubble_poping.parentContainer.remove(bubble_poping);\n                });\n            }\n            shakeBubble(bubble) {\n                this.scene.tweens.add({\n                    targets: bubble,\n                    x: bubble.x - 5,\n                    duration: 100,\n                    yoyo: true,\n                    repeat: 5\n                });\n                this.scene.tweens.add({\n                    targets: bubble,\n                    y: bubble.y + 5,\n                    duration: 70,\n                    yoyo: true,\n                    repeat: 5\n                });\n            }\n            addIdleAnim(bubble) {\n                this.scene.tweens.add({\n                    targets: bubble,\n                    \"scaleX\": 0.95,\n                    duration: 1000,\n                    yoyo: true,\n                    repeat: -1\n                });\n                this.scene.tweens.add({\n                    targets: bubble,\n                    \"scaleY\": 0.97,\n                    duration: 800,\n                    yoyo: true,\n                    repeat: -1\n                });\n            }\n            prepareRound() {\n                delayedCall(750, () => {\n                    this.playCorrectAudio();\n                    delayedCall(750, () => { this.setInputEnabled(true); });\n                });\n                if (this.gameplay.isNewRound()) {\n                    if (!this.gameplay.isRoundsComplete()) {\n                        this.fadeBubblesIn();\n                    }\n                }\n                else {\n                    this.fadeBubblesIn();\n                }\n            }\n            onNewRound(showOut) {\n                this.scene.sound.add(\"next_round\").play();\n                this.setInputEnabled(false);\n                if (showOut) {\n                    this.prepareRound();\n                }\n            }\n            onCorrectAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                let completed = this.gameplay.onCorrectAnswer();\n                this.soundGooseYes = this.scene.sound.add(\"correct drop\");\n                this.soundGooseYes.play();\n                Preloader.playAnim('turtle_shock', this.character, this.playIdle);\n                return completed;\n            }\n            onWrongAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                let lost = this.gameplay.onWrongAnswer();\n                this.soundWrongDrop = this.scene.sound.add(\"wrong drop\");\n                this.soundWrongDrop.play();\n                this.scene.sound.add(\"Goose no\").play();\n                if (this.idleDelayedCall != null) {\n                    destroyDelayedCall(this.idleDelayedCall);\n                    this.idleDelayedCall = null;\n                }\n                return lost;\n            }\n            onCloseClick() {\n                this.showAreYouSurePage();\n                this.scene.sound.add('warning page pop up sfx').play();\n            }\n            showInstructionPage() {\n                setPageBackground(\"bg-blue\");\n                let playInstructionSound = () => {\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                    this.wfsnd = this.scene.sound.add(\"Help Salty\");\n                    this.wfsnd.play();\n                };\n                this.instructionPage = new screen.InstructionPage(this.scene, (target) => {\n                    playBtnClickAnim(target);\n                    this.remove(this.instructionPage);\n                    this.showGameplay();\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                }, (target) => {\n                    playBtnClickAnim(target);\n                    playInstructionSound();\n                });\n                this.add(this.instructionPage);\n                playInstructionSound();\n            }\n            showAreYouSurePage() {\n                pauseAllDelayedCalls();\n                setPageBackground(\"bg-blue\");\n                this.scene.tweens.pauseAll();\n                this.pauseSounds();\n                this.areYouSureWindow = new screen.AreYouSureWindow(this.scene, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.destroyGameplay();\n                    this.showInstructionPage();\n                }, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.unpauseSounds();\n                    resumeAllDelayedCalls();\n                    setPageBackground(\"bg-australia\");\n                });\n                this.add(this.areYouSureWindow);\n            }\n            setInputEnabled(enabled) {\n                if (enabled) {\n                    for (let a of this.words)\n                        a.setInteractive({ cursor: 'pointer' });\n                }\n                else {\n                    for (let a of this.words)\n                        a.disableInteractive();\n                }\n            }\n            pauseSounds() {\n                this.scene.sound.pauseAll();\n            }\n            unpauseSounds() {\n                this.scene.sound.resumeAll();\n            }\n            destroyGameplay() {\n                this.setInputEnabled(false);\n                this.remove(this.gameplayContainer);\n                this.scene.sound.stopAll();\n                destroyAllDelayedCalls();\n            }\n        }\n        screen.GameplayScreen = GameplayScreen;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class InstructionPage extends Phaser.GameObjects.Container {\n            constructor(scene, onPlayClick, onSndClick) {\n                super(scene);\n                this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0 - 105, 0 - 48, 'Instructions page  ALL ACTIVITY  TITLEs');\n                this._instructionPage.setOrigin(0, 0);\n                this._instructionPage.setInteractive();\n                this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'pop-the-bubbles-title');\n                this._instructionPageTitle.setScale(0.65);\n                this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\n                this._btnPlay.setInteractive({ cursor: 'pointer' });\n                this._btnPlay.once('pointerup', onPlayClick);\n                setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\n                this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Help Salty Turtle pop all the word bubbles. Listen to the word and tap on the bubble.\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 30,\n                    \"color\": \"#43425D\",\n                    \"align\": 'center'\n                });\n                this.instrTxt.setOrigin(0.5, 0.5);\n                this.instrTxt.setWordWrapWidth(650);\n                this.instrTxt.setLineSpacing(7);\n                this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\n                this._btnSoundInstruction.setInteractive({ cursor: 'pointer' });\n                this._btnSoundInstruction.on('pointerup', onSndClick);\n                this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\n                setupButtonTextureBased(this._btnSoundInstruction, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._instructionPage);\n                this.add(this._instructionPageTitle);\n                this.add(this.instrTxt);\n                this.add(this._btnPlay);\n                this.add(this._btnSoundInstruction);\n            }\n        }\n        screen.InstructionPage = InstructionPage;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class TryAgainWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-106, -48);\n                this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\n                this._bg.setOrigin(0, 0);\n                this._bg.setInteractive();\n                this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\n                this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bg,\n                    this._star,\n                    this._btnBack,\n                    this._btnReplay,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n            }\n            show(score, starScore) {\n                this._star.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._star,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                this.music = this.scene.sound.add(\"Fail - close one\");\n                this.music.play();\n            }\n        }\n        screen.TryAgainWindow = TryAgainWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\n","namespace ctb {\r\n    export class App extends Phaser.Game {\r\n\r\n        public static readonly CANVAS_WIDTH: number = 980;\r\n        public static readonly CANVAS_HEIGHT: number = 600;\r\n\r\n        constructor() {\r\n            let config: Phaser.Types.Core.GameConfig = {\r\n                type: Phaser.AUTO,\r\n                width: App.CANVAS_WIDTH,\r\n                height: App.CANVAS_HEIGHT,\r\n                parent: 'game-container',\r\n                dom: {\r\n                    createContainer: false\r\n                },\r\n                scale: {\r\n                    mode: FitScaleManager.detectBestScaleMode(),\r\n                    autoCenter: Phaser.Scale.CENTER_BOTH\r\n                },\r\n                transparent: true,\r\n                scene: {\r\n                    create: () => {\r\n                        this.scene.add('Boot', ctb.scene.Boot, true);\r\n                    }\r\n                }\r\n            };\r\n            super(config);\r\n        }\r\n    }\r\n}\r\n\r\nlet game: ctb.App;\r\nwindow.onload = () => {\r\n    game = new ctb.App();\r\n};\r\n\r\nlet delayedCalls = [];\r\nfunction delayedCall(delay: number, callback: Function, args?: any[], callbackScope?: any): Phaser.Time.TimerEvent | number {\r\n    let scene = game.scene.getAt(0);\r\n    if (scene) {\r\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\r\n        delayedCalls.push(dc);\r\n        return dc;\r\n    }\r\n    let t = setTimeout(callback, delay);\r\n    delayedCalls.push(t);\r\n    return t;\r\n}\r\nfunction pauseAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = true;\r\n        }\r\n    }\r\n}\r\nfunction resumeAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = false;\r\n        }\r\n    }\r\n}\r\nfunction destroyAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).remove(false);\r\n        } else {\r\n            clearTimeout(dc);\r\n        }\r\n    }\r\n    delayedCalls = [];\r\n}\r\nfunction destroyDelayedCall(dc) {\r\n    if (dc instanceof Phaser.Time.TimerEvent) {\r\n        (dc as Phaser.Time.TimerEvent).remove(false);\r\n    } else {\r\n        clearTimeout(dc);\r\n    }\r\n    let ind = delayedCalls.indexOf(dc);\r\n    if (ind >= 0) delayedCalls.splice(ind, 1);\r\n}\r\n\r\nfunction setPageBackground(bg: string) {\r\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\r\n}\r\n\r\nfunction setupButton(btn, frame) {\r\n    btn.on('pointerdown', ()=>{btn.setFrame(frame + '_hover' + '0000')});\r\n    btn.on('pointerover', ()=>{btn.setFrame(frame + '_hover' + '0000');game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setFrame(frame + '0000')});\r\n    btn.on('pointerup', ()=>{btn.setFrame(frame + '0000');game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\nfunction setupButtonTextureBased(btn:Phaser.GameObjects.Image, texture, hoverTexture) {\r\n    btn.on('pointerdown', ()=>{btn.setTexture(hoverTexture)});\r\n    btn.on('pointerover', ()=>{btn.setTexture(hoverTexture);game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setTexture(texture)});\r\n    btn.on('pointerup', ()=>{btn.setTexture(texture);game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\n\r\n\r\n\r\nfunction playBtnClickAnim(target): void {\r\n    let sc:number = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\r\n    target.scaleX = target.scaleY = sc;\r\n    let scene = game.scene.getAt(0);\r\n    scene.tweens.add({\r\n        targets: target,\r\n        \"scaleX\": 0.9 * sc,\r\n        \"scaleY\": 0.9 * sc,\r\n        duration: 100,\r\n        yoyo: true\r\n    });\r\n}","/**\r\n * @author Roman Parada\r\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\r\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\r\n *\r\n * How to use:\r\n * Just call the code line below in Boot scene's init() method of your project:\r\n * new FitScaleManager(this.game).setup();\r\n */\r\nclass FitScaleManager {\r\n\r\n    public static detectBestScaleMode():integer {\r\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\r\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\r\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\r\n    };\r\n\r\n    private static RESIZE_DELAY: number = 500;\r\n\r\n    private game: Phaser.Game;\r\n\r\n    private canvasStyle: CSSStyleDeclaration;\r\n    private phaserScaleManager: Phaser.Scale.ScaleManager;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n\r\n        this.canvasStyle = this.game.canvas.style;\r\n        this.phaserScaleManager = this.game.scale;\r\n    }\r\n\r\n    /**\r\n     * Just call this method once in Boot scene's init() method\r\n     */\r\n    public setup(): void {\r\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\r\n\r\n        this.overridePhaserTransformMethods();\r\n\r\n        this.onResize();\r\n    }\r\n\r\n    private calculateScale(): number {\r\n        if (game.scale.scaleMode == Phaser.Scale.NONE) return 1;\r\n\r\n        return Math.min(\r\n            window.innerWidth / this.phaserScaleManager.width,\r\n            window.innerHeight / this.phaserScaleManager.height\r\n        );\r\n    }\r\n\r\n    private overridePhaserTransformMethods(): void {\r\n        this.game.scale.transformX = (pageX: number) => {\r\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n        this.game.scale.transformY = (pageY: number) => {\r\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n    }\r\n\r\n    private onResize(): void {\r\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\r\n    }\r\n\r\n    private doResize: () => void = () => {\r\n        let scale: number = this.calculateScale();\r\n\r\n        let newCanvasWidth: number = this.phaserScaleManager.width * scale;\r\n        let newCanvasHeight: number = this.phaserScaleManager.height * scale;\r\n\r\n        this.canvasStyle.width = newCanvasWidth + 'px';\r\n        this.canvasStyle.height = newCanvasHeight + 'px';\r\n\r\n        this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\r\n        this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\r\n    };\r\n}","namespace ctb.core {\r\n    export class Gameplay {\r\n        public totalRoundsNum:number;\r\n        public readonly failsNumToLose:number;\r\n\r\n        private currentRound:number = 0;\r\n        public allWorlds:object[];\r\n        public words:object[];\r\n        public currentWordData:object;\r\n        public correctAnswersCount: number = 0;\r\n        public wrongAnswersCount: number = 0;\r\n        public correctAnswersCountThisRound: number = 0;\r\n        public wrongAnswersCountThisRound: number = 0;\r\n\r\n        private onComplete:(score:number, starScore:number)=>void;\r\n        private onLose:(score:number, starScore:number)=>void;\r\n        private onNewRound:()=>void = null;\r\n\r\n        public useImages:boolean;\r\n\r\n        constructor() {\r\n            this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\r\n            this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\r\n        }\r\n\r\n        public setupCallbacks(onComplete:(score:number, starScore:number)=>void, onLose:(score:number, starScore:number)=>void, onNewRound:()=>void):void {\r\n            this.onComplete = onComplete;\r\n            this.onLose = onLose;\r\n            this.onNewRound = onNewRound;\r\n        }\r\n\r\n        public calculateScore():number {\r\n            return this.totalRoundsNum - this.wrongAnswersCount;\r\n        }\r\n\r\n        public onLetterChosen():boolean {\r\n            if (this.correctAnswersCountThisRound == 1) {\r\n                this.currentRound++;\r\n                if (this.currentRound >= this.totalRoundsNum) {\r\n                    let score:number = this.calculateScore();\r\n                    this.onComplete(score, score);\r\n                    return true;\r\n                } else {\r\n                    this.nextLetter();\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public nextLetterDelay:number = 0;\r\n        public nextLetter():void {\r\n            let fn:()=>void = ()=>{\r\n                this.currentWordData = Phaser.Utils.Array.RemoveRandomElement(this.words);\r\n\r\n                this.correctAnswersCountThisRound = 0;\r\n                this.wrongAnswersCountThisRound = 0;\r\n\r\n                if (this.onNewRound) this.onNewRound();\r\n            };\r\n            if (this.nextLetterDelay == 0) {\r\n                fn();\r\n            } else {\r\n                delayedCall(this.nextLetterDelay, fn);\r\n            }\r\n        }\r\n\r\n        public onCorrectAnswer(): boolean {\r\n            this.correctAnswersCount++;\r\n            this.correctAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 3500;\r\n\r\n            return this.onLetterChosen();\r\n        }\r\n\r\n        public onWrongAnswer(): boolean {\r\n            this.wrongAnswersCount++;\r\n            this.wrongAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 0;\r\n\r\n            if (this.wrongAnswersCount >= this.failsNumToLose) {\r\n                this.onLose(0, 0);\r\n                return true;\r\n            } else {\r\n                this.onLetterChosen();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCount(): number {\r\n            return this.correctAnswersCount + this.wrongAnswersCount;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCountThisRound(): number {\r\n            return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\r\n        }\r\n\r\n        public isNewRound():boolean {\r\n            return this.getCurrentTotalAnswersCountThisRound() == 0;\r\n        }\r\n\r\n        public isRoundsComplete():boolean {\r\n            return this.currentRound >= this.totalRoundsNum;\r\n        }\r\n\r\n        public reset():void {\r\n            this.nextLetterDelay = 0;\r\n            this.setupCallbacks(null, null, null);\r\n\r\n            let json = game.cache.json.get('gameplay');\r\n            this.words = json[\"words\"].slice();\r\n            this.allWorlds = json[\"words\"].slice();\r\n            this.totalRoundsNum = this.words.length;\r\n\r\n            this.nextLetter();\r\n\r\n            this.currentRound = 0;\r\n            this.correctAnswersCount = 0;\r\n            this.wrongAnswersCount = 0;\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n    export class Boot extends Phaser.Scene {\r\n        init() {\r\n            this.game.scale.transformX = (pageX: number) => {\r\n                let offsetLeft: number = 0;\r\n                let parentElement = game.canvas.parentElement;\r\n                while (parentElement) {\r\n                    if (parentElement.offsetLeft) {\r\n                        offsetLeft = parentElement.offsetLeft;\r\n                        break;\r\n                    }\r\n                    parentElement = parentElement.parentElement;\r\n                }\r\n                return (pageX - offsetLeft) * this.game.scale.displayScale.x;\r\n            };\r\n            this.game.scale.transformY = (pageY: number) => {\r\n                let offsetTop: number = 0;\r\n                let parentElement = game.canvas.parentElement;\r\n                while (parentElement) {\r\n                    if (parentElement.offsetTop) {\r\n                        offsetTop = parentElement.offsetTop;\r\n                        break;\r\n                    }\r\n                    parentElement = parentElement.parentElement;\r\n                }\r\n                return (pageY - offsetTop) * this.game.scale.displayScale.y;\r\n            };\r\n        }\r\n\r\n        create() {\r\n            game.scene.remove('Boot');\r\n            game.scene.add('Preloader', ctb.scene.Preloader, true);\r\n        }\r\n    }\r\n}","namespace ctb.scene {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import GameplayScreen = ctb.screen.GameplayScreen;\r\n\r\n    export class MainScene extends Phaser.Scene {\r\n\r\n        private gameplay:Gameplay;\r\n        private gameplayScreen:GameplayScreen;\r\n\r\n        public create():void {\r\n            this.gameplay = new Gameplay();\r\n\r\n            this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\r\n            this.children.add(this.gameplayScreen);\r\n            this.gameplayScreen.showInstructionPage();\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n\r\n    export class Preloader extends Phaser.Scene {\r\n\r\n        public static readonly ANIMS_DATA:object = {\r\n            'bubble_poping': {\r\n                'start': 0,\r\n                'end': 26,\r\n                'padNum': 4,\r\n                'prefix': 'bubble_poping',\r\n                'repeat': 0,\r\n                'frameRate': 24,\r\n                'atlas': 'bubble-atlas'\r\n            },\r\n            'turtle_idle': {\r\n                'start': 0,\r\n                'end': 35,\r\n                'padNum': 4,\r\n                'prefix': 'turtle_idle',\r\n                'repeat': 0,\r\n                'frameRate': 24,\r\n                'atlas': 'turtle-idle-atlas'\r\n            },\r\n            'turtle_shock': {\r\n                'start': 0,\r\n                'end': 36,\r\n                'padNum': 4,\r\n                'prefix': 'turtle_shock',\r\n                'repeat': 0,\r\n                'frameRate': 24,\r\n                'atlas': 'turtle_shock-atlas'\r\n            },\r\n        };\r\n\r\n        preload() {\r\n            this.load.json('gameplay', 'assets/json/gameplay.json');\r\n        }\r\n\r\n        create() {\r\n            let json = game.cache.json.get('gameplay');\r\n            if (json[\"useImages\"]) {\r\n                for (let w of json[\"words\"]) {\r\n                    this.load.image(w[\"letterName\"], \"assets/imgs/words/\"+w[\"imageKey\"]+\".png\");\r\n                }\r\n            }\r\n            for (let w of json[\"words\"]) {\r\n                this.load.audio(w[\"audioKey\"], \"assets/sound/mp3/words/\"+w[\"audioKey\"]+\".mp3\");\r\n            }\r\n\r\n            let progressTxt:Phaser.GameObjects.Text = this.add.text(game.scale.width/2, game.scale.height/2, \"\", {\r\n                \"fontFamily\": \"Quran Era font\",\r\n                \"fontSize\": 25,\r\n                \"color\": \"#000000\",\r\n                \"align\": 'center'\r\n            });\r\n            progressTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.load.pack('preloader', 'assets/pack.json');\r\n\r\n            this.load.on('progress', (value:number) => {\r\n                progressTxt.text = Math.ceil(value * 100) + \"%\";\r\n            }, this);\r\n\r\n            this.load.on('complete', () => {\r\n                this.nextScene();\r\n            });\r\n\r\n            this.load.start();\r\n        }\r\n\r\n        public static playAnim(animKey:string, sprite:Phaser.GameObjects.Sprite, onComplete:()=>void = null):Phaser.GameObjects.Sprite {\r\n            let mainScene = game.scene.getScene('ScreenMain');\r\n            if (!mainScene.anims.exists(animKey)) {\r\n                let data = Preloader.ANIMS_DATA[animKey];\r\n                mainScene.anims.create({\r\n                    key: animKey,\r\n                    frames: mainScene.anims.generateFrameNames(data['atlas'], {\r\n                        start: data['start'], end: data['end'], zeroPad: data['padNum'],\r\n                        prefix: data['prefix'], suffix: ''\r\n                    }),\r\n                    frameRate: data['frameRate'],\r\n                    repeat: data['repeat']\r\n                });\r\n            }\r\n            if (sprite.anims.currentAnim) {\r\n                sprite.anims.currentAnim.off('complete');\r\n            }\r\n            sprite.anims.stop();\r\n            sprite.play(animKey);\r\n            sprite.anims.currentAnim.once('complete', ()=>{\r\n                if (onComplete) onComplete();\r\n            });\r\n            return sprite;\r\n        }\r\n\r\n        private nextScene():void {\r\n            game.scene.remove('Preloader');\r\n            game.scene.add('ScreenMain', ctb.scene.MainScene, true);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class AreYouSureWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _areYouSurePage: Phaser.GameObjects.Image;\r\n        private _btnSureYes: Phaser.GameObjects.Image;\r\n        private _btnSureNo: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene, onYes:()=>void, onNo:()=>void) {\r\n            super(scene);\r\n\r\n            this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0-48, 'Exit warning');\r\n            this._areYouSurePage.setOrigin(0, 0);\r\n            this._areYouSurePage.setInteractive();\r\n\r\n            this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485-50, 'btnYES1');\r\n            this._btnSureYes.setInteractive({cursor: 'pointer'});\r\n            this._btnSureYes.once('pointerup', onYes);\r\n            setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\r\n\r\n            this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485-50, 'btnNO1');\r\n            this._btnSureNo.setInteractive({cursor: 'pointer'});\r\n            this._btnSureNo.once('pointerup', onNo);\r\n            setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\r\n\r\n            this.add(this._areYouSurePage);\r\n            this.add(this._btnSureYes);\r\n            this.add(this._btnSureNo);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class CompleteWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bgComplete:Phaser.GameObjects.Image;\r\n        _cup:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n        _btnNext:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void, onNext:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-104.5, -48);\r\n\r\n            this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\r\n            this._bgComplete.setOrigin(0, 0);\r\n            this._bgComplete.setInteractive();\r\n            this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\r\n            this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\r\n\r\n            let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bgComplete,\r\n                _CollectedPoints,\r\n                this._cup,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this._btnNext,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n            this._btnNext.setInteractive({cursor: 'pointer'});\r\n            this._btnNext.on('pointerup', ()=>{\r\n                onNext(this._btnNext);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._cup.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._cup,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            // let music = this.scene.sound.add(\"viktory\");\r\n            this.music = this.scene.sound.add(\"Activity completion fantastic\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import Preloader = ctb.scene.Preloader;\r\n\r\n    export class GameplayScreen extends Phaser.GameObjects.Container {\r\n        _gameStage: Phaser.GameObjects.Image;\r\n        _btnClose: Phaser.GameObjects.Image;\r\n\r\n        private gameplayContainer: Phaser.GameObjects.Container;\r\n\r\n        gameplay: Gameplay;\r\n\r\n        _btnSound: Phaser.GameObjects.Image;\r\n\r\n        words:Phaser.GameObjects.Container[];\r\n\r\n        private bgMusic:any = null;\r\n\r\n        private character:Phaser.GameObjects.Sprite;\r\n\r\n        private tfCorrectAnswerCount:Phaser.GameObjects.Text;\r\n        private tfWrongAnswerCount:Phaser.GameObjects.Text;\r\n        private tfTimer:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, gameplay: Gameplay) {\r\n            super(scene);\r\n            this.gameplay = gameplay;window[\"gs\"]=this;\r\n\r\n            this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\r\n            this._gameStage.setOrigin(0.5, 0.5);\r\n            this._gameStage.setScale(1.02);\r\n            this._gameStage.setInteractive();\r\n            this.add(this._gameStage);\r\n\r\n            this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025-105, 100-50,'x Button');\r\n            this._btnClose.setInteractive({cursor: 'pointer'});\r\n            this._btnClose[\"defScale\"] = this._btnClose.scale;\r\n            setupButtonTextureBased(this._btnClose, 'x Button','x Button HOVER EFFECT');\r\n            this.add(this._btnClose);\r\n            this._btnClose.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnClose);\r\n\r\n                this.onCloseClick();\r\n            });\r\n            this._btnSound = new Phaser.GameObjects.Image(this.scene, 160-105, 100-50, 'Sound');\r\n            this._btnSound.setInteractive({cursor: 'pointer'});\r\n            this._btnSound[\"defScale\"] = this._btnSound.scale;\r\n            setupButtonTextureBased(this._btnSound, 'Sound','Sound HOVER EFFECT');\r\n            this.add(this._btnSound);\r\n            this._btnSound.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnSound);\r\n\r\n                this.onSoundClick();\r\n            });\r\n        }\r\n\r\n\r\n        private correctAudio = null;\r\n        private playCorrectAudio():void {\r\n            if (this.correctAudio) {\r\n                this.correctAudio.stop();\r\n            }\r\n            this.correctAudio = this.scene.sound.add(this.gameplay.currentWordData[\"word\"]);\r\n            this.correctAudio.play();\r\n            if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                this.correctAudio.pause();\r\n            }\r\n        }\r\n\r\n        public onSoundClick(): void {\r\n            this.playCorrectAudio();\r\n        }\r\n\r\n        private idleDelayedCall = null;\r\n        private playIdle:()=>void = ()=>{\r\n            Preloader.playAnim('turtle_idle', this.character, ()=> {\r\n                this.idleDelayedCall = delayedCall(Math.floor(Math.random()*5)*500, this.playIdle);\r\n            });\r\n        };\r\n\r\n        public showGameplay(): void {\r\n            setPageBackground(\"bg-australia\");\r\n\r\n            this.bgMusic = this.scene.sound.add(\"Bachground ambience\");\r\n            this.bgMusic.play();\r\n            this.bgMusic.loop = true;\r\n\r\n            this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\r\n            this.addAt(this.gameplayContainer, this.getIndex(this._btnClose));\r\n\r\n            this.gameplay.reset();\r\n\r\n            this.createRounds();\r\n            this.prepareRound();\r\n            this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, ()=>{\r\n                this.onNewRound(true);\r\n            });\r\n        }\r\n\r\n        public createRounds():void {\r\n            this.gameplayContainer.removeAll();\r\n\r\n            this.character = this.scene.add.sprite(205, 435, null);\r\n            this.playIdle();\r\n            this.gameplayContainer.add(this.character);\r\n\r\n            let randomized:object[] = this.gameplay.allWorlds.slice();//Phaser.Utils.Array.Shuffle(this.gameplay.allWorlds.slice());\r\n            this.words = [];\r\n            let positions = [\r\n                {x:68, y:174},{x:235, y:72},{x:461, y:98},{x:367, y:253},{x:674, y:52},{x:605, y:226},{x:429, y:416},{x:654, y:390}\r\n            ];\r\n            for (let i:number = 0; i < randomized.length; i++) {\r\n                let w:Phaser.GameObjects.Container = new Phaser.GameObjects.Container(this.scene, positions[i]['x']+20+83, positions[i]['y']+23+65);\r\n                w.add(w[\"-image-\"] = new Phaser.GameObjects.Image(this.scene, 0, 0,'Bubble'));\r\n                w[\"-image-\"].setOrigin(0.5, 0.5);\r\n                this.words.push(w);\r\n\r\n                let txt:Phaser.GameObjects.Text | Phaser.GameObjects.Image;\r\n                if (this.gameplay.useImages) {\r\n                    txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomized[i][\"imageKey\"]);\r\n                    w.add(txt);\r\n                } else {\r\n                    txt = this.scene.add.text(0, -5, \"\", {\r\n                        \"fontFamily\": \"Quran Era font\",\r\n                        \"fontSize\": 55 as any,\r\n                        \"color\": \"#000000\",\r\n                        \"align\": 'center'\r\n                    });\r\n                    txt.setOrigin(0.5, 0.5);\r\n                    txt.style.fixedHeight = 75;\r\n                    txt.setText(randomized[i][\"word\"]);\r\n                    w.add(txt);\r\n                }\r\n                w.alpha = 0;\r\n\r\n                w[\"-letter-\"] = txt;\r\n                w[\"-word-text-\"] = randomized[i][\"word\"];\r\n                this.gameplayContainer.add(w);\r\n\r\n                this.addIdleAnim(w);\r\n            }\r\n\r\n            for (let word of this.words) {\r\n                word.setSize(word[\"-image-\"].width, word[\"-image-\"].height);\r\n                word.setInteractive({cursor: 'pointer'});\r\n\r\n                word.on('pointerdown', () => {\r\n                    this.setInputEnabled(false);\r\n\r\n                    if (word[\"-word-text-\"] == this.gameplay.currentWordData[\"word\"]) {\r\n                        this.onCorrectAnswer();\r\n\r\n                        this.showPopBubble(word);\r\n\r\n                        this.fadeBubblesOut();\r\n\r\n                        this.tfCorrectAnswerCount.setText(String(this.gameplay.correctAnswersCount));\r\n                    } else {\r\n                        let lost:boolean = this.onWrongAnswer();\r\n\r\n                        this.shakeBubble(word);\r\n\r\n                        delayedCall(550, ()=>{\r\n                            if (!lost) {\r\n                                this.setInputEnabled(true);\r\n                            }\r\n                        });\r\n\r\n                        this.tfWrongAnswerCount.setText(String(this.gameplay.wrongAnswersCount));\r\n                    }\r\n                });\r\n            }\r\n\r\n            this._btnClose.setInteractive({cursor: 'pointer', pixelPerfect:true});\r\n\r\n            this.setInputEnabled(false);\r\n\r\n            this.tfCorrectAnswerCount = this.scene.add.text(game.scale.width/2-118, 29, \"0\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 20 as any,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.gameplayContainer.add(this.tfCorrectAnswerCount);\r\n            this.tfWrongAnswerCount = this.scene.add.text(game.scale.width/2-26, 29, \"0\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 20 as any,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.gameplayContainer.add(this.tfWrongAnswerCount);\r\n            this.tfTimer = this.scene.add.text(game.scale.width/2+73, 29, \"00:00\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 20 as any,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.gameplayContainer.add(this.tfTimer);\r\n\r\n            let seconds:number = 90;\r\n            this.renderTimer(seconds);\r\n            this.timerEvent = this.scene.time.addEvent({ delay: 1000, repeat: seconds });\r\n            this.timerEvent.callback = ()=>{\r\n                if (this.timerEvent.repeatCount == 0) {\r\n                    this.showLoseWindow(0, 0);\r\n                }\r\n                this.renderTimer(this.timerEvent.repeatCount);\r\n            };\r\n        }\r\n\r\n        private timerEvent: Phaser.Time.TimerEvent;\r\n\r\n        private renderTimer(seconds:number):void {\r\n            let sec:number = seconds % 60;\r\n            let min:number = Math.round((seconds - sec) / 60);\r\n            this.tfTimer.setText((min < 10 ? '0'+min:min)\r\n                +\":\"+\r\n                (sec < 10 ? '0'+sec:sec));\r\n        }\r\n\r\n        private fadeBubblesIn() {\r\n            for (let bubble of this.words) {\r\n                this.scene.tweens.add({\r\n                    targets: bubble,\r\n                    alpha: 1,\r\n                    duration: 1000\r\n                });\r\n            }\r\n        }\r\n        private fadeBubblesOut() {\r\n            for (let bubble of this.words) {\r\n                this.scene.tweens.add({\r\n                    targets: bubble,\r\n                    alpha: 0,\r\n                    duration: 1000\r\n                });\r\n            }\r\n        }\r\n\r\n        private showPopBubble(bubble) {\r\n            let bubble_poping = this.scene.add.sprite(bubble.x, bubble.y, null);\r\n            this.gameplayContainer.add(bubble_poping);\r\n            Preloader.playAnim('bubble_poping', bubble_poping, ()=>{\r\n                if (bubble_poping.parentContainer) bubble_poping.parentContainer.remove(bubble_poping);\r\n            });\r\n        }\r\n\r\n        private shakeBubble(bubble) {\r\n            this.scene.tweens.add({\r\n                targets: bubble,\r\n                x: bubble.x-5,\r\n                duration: 100,\r\n                yoyo: true,\r\n                repeat: 5\r\n            });\r\n            this.scene.tweens.add({\r\n                targets: bubble,\r\n                y: bubble.y+5,\r\n                duration: 70,\r\n                yoyo: true,\r\n                repeat: 5\r\n            });\r\n        }\r\n\r\n        private addIdleAnim(bubble) {\r\n            this.scene.tweens.add({\r\n                targets: bubble,\r\n                \"scaleX\": 0.95,\r\n                duration: 1000,\r\n                yoyo: true,\r\n                repeat: -1\r\n            });\r\n            this.scene.tweens.add({\r\n                targets: bubble,\r\n                \"scaleY\": 0.97,\r\n                duration: 800,\r\n                yoyo: true,\r\n                repeat: -1\r\n            });\r\n        }\r\n\r\n        public prepareRound():void {\r\n            delayedCall(750, ()=>{\r\n                this.playCorrectAudio();\r\n\r\n                delayedCall(750, ()=>{this.setInputEnabled(true);});\r\n            });\r\n\r\n            if (this.gameplay.isNewRound()) {\r\n                if (!this.gameplay.isRoundsComplete()) {\r\n                    this.fadeBubblesIn();\r\n                }\r\n            } else {\r\n                this.fadeBubblesIn();\r\n            }\r\n        }\r\n\r\n        private onNewRound(showOut:boolean):void {\r\n            this.scene.sound.add(\"next_round\").play();\r\n\r\n            this.setInputEnabled(false);\r\n\r\n            if (showOut) {\r\n                this.prepareRound();\r\n            }\r\n        }\r\n\r\n        private soundGooseYes = null;\r\n        public onCorrectAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n\r\n            let completed:boolean = this.gameplay.onCorrectAnswer();\r\n\r\n            this.soundGooseYes = this.scene.sound.add(\"correct drop\");\r\n            this.soundGooseYes.play();\r\n\r\n            Preloader.playAnim('turtle_shock', this.character, this.playIdle);\r\n\r\n            return completed;\r\n        }\r\n\r\n        private soundWrongDrop = null;\r\n        public onWrongAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n\r\n            let lost:boolean = this.gameplay.onWrongAnswer();\r\n\r\n            this.soundWrongDrop = this.scene.sound.add(\"wrong drop\");\r\n            this.soundWrongDrop.play();\r\n            this.scene.sound.add(\"Goose no\").play();\r\n\r\n            if (this.idleDelayedCall != null) {\r\n                destroyDelayedCall(this.idleDelayedCall);\r\n                this.idleDelayedCall = null;\r\n            }\r\n\r\n            return lost;\r\n        }\r\n\r\n        public onCloseClick(): void {\r\n            this.showAreYouSurePage();\r\n            this.scene.sound.add('warning page pop up sfx').play();\r\n        }\r\n\r\n        private wfsnd = null;\r\n        private instructionPage: InstructionPage;\r\n        public showInstructionPage(): void {\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            let playInstructionSound:()=>void = ()=>{\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n                this.wfsnd = this.scene.sound.add(\"Help Salty\");\r\n                this.wfsnd.play();\r\n            };\r\n\r\n            this.instructionPage = new InstructionPage(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.remove(this.instructionPage);\r\n                this.showGameplay();\r\n\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n            },(target) => {\r\n                playBtnClickAnim(target);\r\n                playInstructionSound();\r\n            });\r\n            this.add(this.instructionPage);\r\n            playInstructionSound();\r\n        }\r\n\r\n        private areYouSureWindow:AreYouSureWindow;\r\n        public showAreYouSurePage(): void {\r\n            pauseAllDelayedCalls();\r\n            setPageBackground(\"bg-blue\");\r\n            this.scene.tweens.pauseAll();\r\n\r\n            this.pauseSounds();\r\n\r\n            this.areYouSureWindow = new AreYouSureWindow(this.scene, ()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.destroyGameplay();\r\n                this.showInstructionPage();\r\n            },()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.unpauseSounds();\r\n                resumeAllDelayedCalls();\r\n                setPageBackground(\"bg-australia\");\r\n            });\r\n            this.add(this.areYouSureWindow);\r\n        }\r\n\r\n        public showCompleteWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let completeWindow: CompleteWindow = new CompleteWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(completeWindow);\r\n                this.showInstructionPage();\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(2000, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(completeWindow);\r\n                completeWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public showLoseWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            this.timerEvent.destroy();\r\n\r\n            let tryAgainWindow: TryAgainWindow = new TryAgainWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(tryAgainWindow);\r\n                this.showInstructionPage();\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(1500, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(tryAgainWindow);\r\n                tryAgainWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public setInputEnabled(enabled: boolean): void {\r\n            if (enabled) {\r\n                for (let a of this.words) a.setInteractive({cursor: 'pointer'});\r\n            } else {\r\n                for (let a of this.words) a.disableInteractive();\r\n            }\r\n        }\r\n\r\n        public pauseSounds():void {\r\n            this.scene.sound.pauseAll();\r\n        }\r\n\r\n        public unpauseSounds():void {\r\n            this.scene.sound.resumeAll();\r\n        }\r\n\r\n        public destroyGameplay():void {\r\n            this.setInputEnabled(false);\r\n            this.remove(this.gameplayContainer);\r\n            this.scene.sound.stopAll();\r\n            destroyAllDelayedCalls();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class InstructionPage extends Phaser.GameObjects.Container {\r\n\r\n        private _instructionPage: Phaser.GameObjects.Image;\r\n        private _instructionPageTitle: Phaser.GameObjects.Image;\r\n        private _btnPlay: Phaser.GameObjects.Image;\r\n        private _btnSoundInstruction: Phaser.GameObjects.Image;\r\n        private instrTxt: Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onPlayClick:(target)=>void, onSndClick:(target)=>void) {\r\n            super(scene);\r\n\r\n            this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0-105, 0-48, 'Instructions page  ALL ACTIVITY  TITLEs');\r\n            this._instructionPage.setOrigin(0, 0);\r\n            this._instructionPage.setInteractive();\r\n\r\n            this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'pop-the-bubbles-title');\r\n            this._instructionPageTitle.setScale(0.65);\r\n\r\n            this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\r\n            this._btnPlay.setInteractive({cursor: 'pointer'});\r\n            this._btnPlay.once('pointerup', onPlayClick);\r\n            setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\r\n\r\n            this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Help Salty Turtle pop all the word bubbles. Listen to the word and tap on the bubble.\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 30,\r\n                \"color\": \"#43425D\",\r\n                \"align\": 'center'\r\n            });\r\n            this.instrTxt.setOrigin(0.5, 0.5);\r\n            this.instrTxt.setWordWrapWidth(650);\r\n            this.instrTxt.setLineSpacing(7);\r\n\r\n            this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\r\n            this._btnSoundInstruction.setInteractive({cursor: 'pointer'});\r\n            this._btnSoundInstruction.on('pointerup', onSndClick);\r\n            this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\r\n            setupButtonTextureBased(this._btnSoundInstruction, 'Sound','Sound HOVER EFFECT');\r\n\r\n            this.add(this._instructionPage);\r\n            this.add(this._instructionPageTitle);\r\n            this.add(this.instrTxt);\r\n            this.add(this._btnPlay);\r\n            this.add(this._btnSoundInstruction);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class TryAgainWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bg:Phaser.GameObjects.Image;\r\n        _star:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-106, -48);\r\n\r\n            this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\r\n            this._bg.setOrigin(0, 0);\r\n            this._bg.setInteractive();\r\n            this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bg,\r\n                this._star,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._star.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._star,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            this.music = this.scene.sound.add(\"Fail - close one\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}"]}
{"version":3,"sources":["main.js","../ts/src/App.ts","../ts/src/screen/TryAgainWindow.ts","../ts/src/FitScaleManager.ts","../ts/src/core/Gameplay.ts","../ts/src/scene/Boot.ts","../ts/src/scene/MainScene.ts","../ts/src/scene/Preloader.ts","../ts/src/screen/AreYouSureWindow.ts","../ts/src/screen/CompleteWindow.ts","../ts/src/screen/GameplayScreen.ts","../ts/src/screen/InstructionPage.ts"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","toString","call","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Date","getPrototypeOf","game","ctb","App","_Phaser$Game","Phaser","Game","_super","_this","config","type","AUTO","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","scale","mode","FitScaleManager","detectBestScaleMode","autoCenter","Scale","CENTER_BOTH","transparent","scene","add","Boot","window","onload","delayedCalls","delayedCall","delay","callback","args","callbackScope","getAt","dc","time","push","t","setTimeout","pauseAllDelayedCalls","_step","_iterator","Time","TimerEvent","paused","resumeAllDelayedCalls","_step2","_iterator2","destroyAllDelayedCalls","_step3","_iterator3","remove","clearTimeout","destroyDelayedCall","ind","indexOf","splice","setPageBackground","bg","document","querySelector","style","backgroundImage","setupButton","btn","frame","on","setFrame","sound","play","setupButtonTextureBased","texture","hoverTexture","setTexture","playBtnClickAnim","sc","hasOwnProperty","scaleX","scaleY","tweens","targets","duration","yoyo","_this2","doResize","calculateScale","newCanvasWidth","phaserScaleManager","newCanvasHeight","canvasStyle","marginLeft","innerWidth","marginTop","innerHeight","canvas","addListener","Events","RESIZE","onResize","overridePhaserTransformMethods","scaleMode","NONE","Math","min","_this3","transformX","pageX","parseInt","split","transformY","pageY","RESIZE_DELAY","iOS","navigator","platform","isAndroid","userAgent","toLowerCase","FIT","core","Gameplay","currentRound","correctAnswersCount","wrongAnswersCount","correctAnswersCountThisRound","wrongAnswersCountThisRound","onNewRound","nextLetterDelay","failsNumToLose","Number","cache","json","get","useImages","Boolean","onComplete","onLose","totalRoundsNum","score","calculateScore","nextLetter","_this4","fn","currentWordData","Utils","RemoveRandomElement","words","onLetterChosen","getCurrentTotalAnswersCountThisRound","setupCallbacks","allWorlds","_Phaser$Scene","Scene","_super2","setup","Preloader","MainScene","_Phaser$Scene2","_super3","gameplay","gameplayScreen","screen","GameplayScreen","children","showInstructionPage","_Phaser$Scene3","_super4","load","_this5","_step4","_iterator4","w","image","_step5","_iterator5","audio","progressTxt","text","fontFamily","fontSize","color","align","setOrigin","pack","ceil","nextScene","start","animKey","sprite","undefined","mainScene","getScene","anims","exists","data","ANIMS_DATA","frames","generateFrameNames","end","zeroPad","prefix","suffix","frameRate","repeat","currentAnim","off","stop","once","bubble_poping","padNum","atlas","bubble_idle","turtle_idle","turtle_shock_in","turtle_shock_out","AreYouSureWindow","_Phaser$GameObjects$C","GameObjects","Container","_super5","onYes","onNo","_this6","_areYouSurePage","Image","setInteractive","_btnSureYes","cursor","_btnSureNo","CompleteWindow","_Phaser$GameObjects$C2","_super6","onBack","onReplay","onNext","_this7","music","setPosition","_bgComplete","_cup","_btnBack","_btnReplay","_btnNext","_CollectedPoints","totalScoreTxt","stroke","strokeThickness","grd","context","createLinearGradient","addColorStop","setFill","starScoreTxt","starScore","ease","Easing","Back","Out","String","_Phaser$GameObjects$C3","_super7","_this8","bgMusic","correctAudio","idleDelayedCall","playIdle","playAnim","character","floor","random","sfxBubblePopCounter","wfsnd","showCompleteWindow","completeWindow","destroyGameplay","setInputEnabled","show","showLoseWindow","timerEvent","destroy","tryAgainWindow","TryAgainWindow","_gameStage","setScale","_btnClose","onCloseClick","_btnSound","onSoundClick","areYouSureWindow","parentContainer","pause","playCorrectAudio","_this9","loop","gameplayContainer","addAt","getIndex","reset","createRounds","prepareRound","_this10","removeAll","randomized","positions","x","y","txt","fixedHeight","setText","_step6","_iterator6","_loop","word","setSize","onCorrectAnswer","showPopBubble","tfCorrectAnswerCount","lost","onWrongAnswer","shakeBubble","destroyIdleDelayedCallIfExists","tfWrongAnswerCount","pixelPerfect","tfTimer","renderTimer","addEvent","repeatCount","seconds","sec","round","bubble","_this11","showOut","getCurrentTotalAnswersCount","completed","_this12","showAreYouSurePage","_this13","playInstructionSound","instructionPage","InstructionPage","showGameplay","_this14","pauseAll","pauseSounds","resumeAll","unpauseSounds","enabled","_step7","_iterator7","_step8","_iterator8","disableInteractive","stopAll","_Phaser$GameObjects$C4","_super8","onPlayClick","onSndClick","_this15","_instructionPage","_instructionPageTitle","_btnPlay","instrTxt","setWordWrapWidth","setLineSpacing","_btnSoundInstruction","_Phaser$GameObjects$C5","_super9","_this16","_bg","_star"],"mappings":"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","file":"main.js","sourcesContent":["var ctb;\n(function (ctb) {\n    class App extends Phaser.Game {\n        constructor() {\n            let config = {\n                type: Phaser.AUTO,\n                width: App.CANVAS_WIDTH,\n                height: App.CANVAS_HEIGHT,\n                scale: {\n                    mode: FitScaleManager.detectBestScaleMode(),\n                    autoCenter: Phaser.Scale.CENTER_BOTH\n                },\n                transparent: true,\n                scene: {\n                    create: () => {\n                        this.scene.add('Boot', ctb.scene.Boot, true);\n                    }\n                }\n            };\n            super(config);\n        }\n    }\n    App.CANVAS_WIDTH = 980;\n    App.CANVAS_HEIGHT = 600;\n    ctb.App = App;\n})(ctb || (ctb = {}));\nlet game;\nwindow.onload = () => {\n    game = new ctb.App();\n};\nlet delayedCalls = [];\nfunction delayedCall(delay, callback, args, callbackScope) {\n    let scene = game.scene.getAt(0);\n    if (scene) {\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\n        delayedCalls.push(dc);\n        return dc;\n    }\n    let t = setTimeout(callback, delay);\n    delayedCalls.push(t);\n    return t;\n}\nfunction pauseAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = true;\n        }\n    }\n}\nfunction resumeAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = false;\n        }\n    }\n}\nfunction destroyAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.remove(false);\n        }\n        else {\n            clearTimeout(dc);\n        }\n    }\n    delayedCalls = [];\n}\nfunction destroyDelayedCall(dc) {\n    if (dc instanceof Phaser.Time.TimerEvent) {\n        dc.remove(false);\n    }\n    else {\n        clearTimeout(dc);\n    }\n    let ind = delayedCalls.indexOf(dc);\n    if (ind >= 0)\n        delayedCalls.splice(ind, 1);\n}\nfunction setPageBackground(bg) {\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\n}\nfunction setupButton(btn, frame) {\n    btn.on('pointerdown', () => { btn.setFrame(frame + '_hover' + '0000'); });\n    btn.on('pointerover', () => { btn.setFrame(frame + '_hover' + '0000'); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setFrame(frame + '0000'); });\n    btn.on('pointerup', () => { btn.setFrame(frame + '0000'); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction setupButtonTextureBased(btn, texture, hoverTexture) {\n    btn.on('pointerdown', () => { btn.setTexture(hoverTexture); });\n    btn.on('pointerover', () => { btn.setTexture(hoverTexture); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setTexture(texture); });\n    btn.on('pointerup', () => { btn.setTexture(texture); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction playBtnClickAnim(target) {\n    let sc = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\n    target.scaleX = target.scaleY = sc;\n    let scene = game.scene.getAt(0);\n    scene.tweens.add({\n        targets: target,\n        \"scaleX\": 0.9 * sc,\n        \"scaleY\": 0.9 * sc,\n        duration: 100,\n        yoyo: true\n    });\n}\n/**\n * @author Roman Parada\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\n *\n * How to use:\n * Just call the code line below in Boot scene's init() method of your project:\n * new FitScaleManager(this.game).setup();\n */\nclass FitScaleManager {\n    constructor(game) {\n        this.doResize = () => {\n            let scale = this.calculateScale();\n            let newCanvasWidth = this.phaserScaleManager.width * scale;\n            let newCanvasHeight = this.phaserScaleManager.height * scale;\n            this.canvasStyle.width = newCanvasWidth + 'px';\n            this.canvasStyle.height = newCanvasHeight + 'px';\n            this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\n            this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\n        };\n        this.game = game;\n        this.canvasStyle = this.game.canvas.style;\n        this.phaserScaleManager = this.game.scale;\n    }\n    static detectBestScaleMode() {\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\n    }\n    ;\n    /**\n     * Just call this method once in Boot scene's init() method\n     */\n    setup() {\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\n        this.overridePhaserTransformMethods();\n        this.onResize();\n    }\n    calculateScale() {\n        if (game.scale.scaleMode == Phaser.Scale.NONE)\n            return 1;\n        return Math.min(window.innerWidth / this.phaserScaleManager.width, window.innerHeight / this.phaserScaleManager.height);\n    }\n    overridePhaserTransformMethods() {\n        this.game.scale.transformX = (pageX) => {\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\n        };\n        this.game.scale.transformY = (pageY) => {\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\n        };\n    }\n    onResize() {\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\n    }\n}\nFitScaleManager.RESIZE_DELAY = 500;\nvar ctb;\n(function (ctb) {\n    var core;\n    (function (core) {\n        class Gameplay {\n            constructor() {\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n                this.onNewRound = null;\n                this.nextLetterDelay = 0;\n                this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\n                this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\n            }\n            setupCallbacks(onComplete, onLose, onNewRound) {\n                this.onComplete = onComplete;\n                this.onLose = onLose;\n                this.onNewRound = onNewRound;\n            }\n            calculateScore() {\n                return this.totalRoundsNum - this.wrongAnswersCount;\n            }\n            onLetterChosen() {\n                if (this.correctAnswersCountThisRound == 1) {\n                    this.currentRound++;\n                    if (this.currentRound >= this.totalRoundsNum) {\n                        let score = this.calculateScore();\n                        this.onComplete(score, score);\n                        return true;\n                    }\n                    else {\n                        this.nextLetter();\n                    }\n                }\n                return false;\n            }\n            nextLetter() {\n                let fn = () => {\n                    this.currentWordData = Phaser.Utils.Array.RemoveRandomElement(this.words);\n                    this.correctAnswersCountThisRound = 0;\n                    this.wrongAnswersCountThisRound = 0;\n                    if (this.onNewRound)\n                        this.onNewRound();\n                };\n                if (this.nextLetterDelay == 0) {\n                    fn();\n                }\n                else {\n                    delayedCall(this.nextLetterDelay, fn);\n                }\n            }\n            onCorrectAnswer() {\n                this.correctAnswersCount++;\n                this.correctAnswersCountThisRound++;\n                this.nextLetterDelay = 1500;\n                return this.onLetterChosen();\n            }\n            onWrongAnswer() {\n                this.wrongAnswersCount++;\n                this.wrongAnswersCountThisRound++;\n                this.nextLetterDelay = 0;\n                if (this.wrongAnswersCount >= this.failsNumToLose) {\n                    this.onLose(0, 0);\n                    return true;\n                }\n                else {\n                    this.onLetterChosen();\n                }\n                return false;\n            }\n            getCurrentTotalAnswersCount() {\n                return this.correctAnswersCount + this.wrongAnswersCount;\n            }\n            getCurrentTotalAnswersCountThisRound() {\n                return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\n            }\n            isNewRound() {\n                return this.getCurrentTotalAnswersCountThisRound() == 0;\n            }\n            isRoundsComplete() {\n                return this.currentRound >= this.totalRoundsNum;\n            }\n            reset() {\n                this.nextLetterDelay = 0;\n                this.setupCallbacks(null, null, null);\n                let json = game.cache.json.get('gameplay');\n                this.words = json[\"words\"].slice();\n                this.allWorlds = json[\"words\"].slice();\n                this.totalRoundsNum = this.words.length;\n                this.nextLetter();\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n        }\n        core.Gameplay = Gameplay;\n    })(core = ctb.core || (ctb.core = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Boot extends Phaser.Scene {\n            init() {\n                new FitScaleManager(this.game).setup();\n            }\n            create() {\n                game.scene.remove('Boot');\n                game.scene.add('Preloader', ctb.scene.Preloader, true);\n            }\n        }\n        scene.Boot = Boot;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        var Gameplay = ctb.core.Gameplay;\n        class MainScene extends Phaser.Scene {\n            create() {\n                this.gameplay = new Gameplay();\n                this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\n                this.children.add(this.gameplayScreen);\n                this.gameplayScreen.showInstructionPage();\n            }\n        }\n        scene.MainScene = MainScene;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Preloader extends Phaser.Scene {\n            preload() {\n                this.load.json('gameplay', 'assets/json/gameplay.json');\n            }\n            create() {\n                let json = game.cache.json.get('gameplay');\n                if (json[\"useImages\"]) {\n                    for (let w of json[\"words\"]) {\n                        this.load.image(w[\"letterName\"], \"assets/imgs/words/\" + w[\"imageKey\"] + \".png\");\n                    }\n                }\n                for (let w of json[\"words\"]) {\n                    this.load.audio(w[\"audioKey\"], \"assets/sound/mp3/words/\" + w[\"audioKey\"] + \".mp3\");\n                }\n                let progressTxt = this.add.text(game.scale.width / 2, game.scale.height / 2, \"\", {\n                    \"fontFamily\": \"Quran Era font\",\n                    \"fontSize\": 25,\n                    \"color\": \"#000000\",\n                    \"align\": 'center'\n                });\n                progressTxt.setOrigin(0.5, 0.5);\n                this.load.pack('preloader', 'assets/pack.json');\n                this.load.on('progress', (value) => {\n                    progressTxt.text = Math.ceil(value * 100) + \"%\";\n                }, this);\n                this.load.on('complete', () => {\n                    this.nextScene();\n                });\n                this.load.start();\n            }\n            static playAnim(animKey, sprite, onComplete = null) {\n                let mainScene = game.scene.getScene('ScreenMain');\n                if (!mainScene.anims.exists(animKey)) {\n                    let data = Preloader.ANIMS_DATA[animKey];\n                    mainScene.anims.create({\n                        key: animKey,\n                        frames: mainScene.anims.generateFrameNames(data['atlas'], {\n                            start: data['start'], end: data['end'], zeroPad: data['padNum'],\n                            prefix: data['prefix'], suffix: ''\n                        }),\n                        frameRate: data['frameRate'],\n                        repeat: data['repeat']\n                    });\n                }\n                if (sprite.anims.currentAnim) {\n                    sprite.anims.currentAnim.off('complete');\n                }\n                sprite.anims.stop();\n                sprite.play(animKey);\n                sprite.anims.currentAnim.once('complete', () => {\n                    if (onComplete)\n                        onComplete();\n                });\n                return sprite;\n            }\n            nextScene() {\n                game.scene.remove('Preloader');\n                game.scene.add('ScreenMain', ctb.scene.MainScene, true);\n            }\n        }\n        Preloader.ANIMS_DATA = {\n            'bubble_poping': {\n                'start': 0,\n                'end': 26,\n                'padNum': 4,\n                'prefix': 'bubble_poping',\n                'repeat': 0,\n                'frameRate': 24,\n                'atlas': 'bubble-atlas'\n            },\n            'bubble_idle': {\n                'start': 0,\n                'end': 50,\n                'padNum': 4,\n                'prefix': 'idle',\n                'repeat': -1,\n                'frameRate': 24,\n                'atlas': 'bubble-atlas'\n            },\n            'turtle_idle': {\n                'start': 0,\n                'end': 35,\n                'padNum': 4,\n                'prefix': 'turtle_idle',\n                'repeat': 0,\n                'frameRate': 24,\n                'atlas': 'turtle-idle-atlas'\n            },\n            'turtle_shock_in': {\n                'start': 0,\n                'end': 16,\n                'padNum': 4,\n                'prefix': 'turtle_shock',\n                'repeat': 0,\n                'frameRate': 24,\n                'atlas': 'turtle_shock-atlas'\n            },\n            'turtle_shock_out': {\n                'start': 16,\n                'end': 32,\n                'padNum': 4,\n                'prefix': 'turtle_shock',\n                'repeat': 0,\n                'frameRate': 24,\n                'atlas': 'turtle_shock-atlas'\n            },\n        };\n        scene.Preloader = Preloader;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class AreYouSureWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onYes, onNo) {\n                super(scene);\n                this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0 - 48, 'Exit warning');\n                this._areYouSurePage.setOrigin(0, 0);\n                this._areYouSurePage.setInteractive();\n                this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485 - 50, 'btnYES1');\n                this._btnSureYes.setInteractive({ cursor: 'pointer' });\n                this._btnSureYes.once('pointerup', onYes);\n                setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\n                this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485 - 50, 'btnNO1');\n                this._btnSureNo.setInteractive({ cursor: 'pointer' });\n                this._btnSureNo.once('pointerup', onNo);\n                setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\n                this.add(this._areYouSurePage);\n                this.add(this._btnSureYes);\n                this.add(this._btnSureNo);\n            }\n        }\n        screen.AreYouSureWindow = AreYouSureWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class CompleteWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay, onNext) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-104.5, -48);\n                this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\n                this._bgComplete.setOrigin(0, 0);\n                this._bgComplete.setInteractive();\n                this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\n                this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\n                let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\n                this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bgComplete,\n                    _CollectedPoints,\n                    this._cup,\n                    this._btnBack,\n                    this._btnReplay,\n                    this._btnNext,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n                this._btnNext.setInteractive({ cursor: 'pointer' });\n                this._btnNext.on('pointerup', () => {\n                    onNext(this._btnNext);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\n            }\n            show(score, starScore) {\n                this._cup.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._cup,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                // let music = this.scene.sound.add(\"viktory\");\n                this.music = this.scene.sound.add(\"Activity completion fantastic\");\n                this.music.play();\n            }\n        }\n        screen.CompleteWindow = CompleteWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        var Preloader = ctb.scene.Preloader;\n        class GameplayScreen extends Phaser.GameObjects.Container {\n            constructor(scene, gameplay) {\n                super(scene);\n                this.bgMusic = null;\n                this.correctAudio = null;\n                this.idleDelayedCall = null;\n                this.playIdle = () => {\n                    Preloader.playAnim('turtle_idle', this.character, () => {\n                        this.idleDelayedCall = delayedCall(Math.floor(Math.random() * 5) * 500, this.playIdle);\n                    });\n                };\n                this.sfxBubblePopCounter = 0;\n                this.wfsnd = null;\n                this.showCompleteWindow = (score, starScore) => {\n                    let completeWindow = new screen.CompleteWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(completeWindow);\n                        this.showInstructionPage();\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(2500, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(completeWindow);\n                        completeWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.showLoseWindow = (score, starScore) => {\n                    this.timerEvent.destroy();\n                    let tryAgainWindow = new screen.TryAgainWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(tryAgainWindow);\n                        this.showInstructionPage();\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(3000, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(tryAgainWindow);\n                        tryAgainWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.gameplay = gameplay;\n                window[\"gs\"] = this;\n                this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\n                this._gameStage.setOrigin(0.5, 0.5);\n                this._gameStage.setScale(1.02);\n                this._gameStage.setInteractive();\n                this.add(this._gameStage);\n                this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025 - 105, 100 - 50, 'x Button');\n                this._btnClose.setInteractive({ cursor: 'pointer' });\n                this._btnClose[\"defScale\"] = this._btnClose.scale;\n                setupButtonTextureBased(this._btnClose, 'x Button', 'x Button HOVER EFFECT');\n                this.add(this._btnClose);\n                this._btnClose.on('pointerup', () => {\n                    playBtnClickAnim(this._btnClose);\n                    this.onCloseClick();\n                });\n                this._btnSound = new Phaser.GameObjects.Image(this.scene, 160 - 105, 100 - 50, 'Sound');\n                this._btnSound.setInteractive({ cursor: 'pointer' });\n                this._btnSound[\"defScale\"] = this._btnSound.scale;\n                setupButtonTextureBased(this._btnSound, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._btnSound);\n                this._btnSound.on('pointerup', () => {\n                    playBtnClickAnim(this._btnSound);\n                    this.onSoundClick();\n                });\n            }\n            playCorrectAudio() {\n                if (this.correctAudio) {\n                    this.correctAudio.stop();\n                }\n                this.correctAudio = this.scene.sound.add(this.gameplay.currentWordData[\"word\"]);\n                this.correctAudio.play();\n                if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                    this.correctAudio.pause();\n                }\n            }\n            onSoundClick() {\n                this.playCorrectAudio();\n            }\n            destroyIdleDelayedCallIfExists() {\n                if (this.idleDelayedCall != null) {\n                    destroyDelayedCall(this.idleDelayedCall);\n                    this.idleDelayedCall = null;\n                }\n            }\n            showGameplay() {\n                setPageBackground(\"bg-australia\");\n                this.bgMusic = this.scene.sound.add(\"Bachground ambience\");\n                this.bgMusic.play();\n                this.bgMusic.loop = true;\n                this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\n                this.addAt(this.gameplayContainer, this.getIndex(this._btnClose));\n                this.gameplay.reset();\n                this.createRounds();\n                this.prepareRound();\n                this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, () => {\n                    this.onNewRound(true);\n                });\n            }\n            createRounds() {\n                this.gameplayContainer.removeAll();\n                this.character = this.scene.add.sprite(205, 435, null);\n                this.playIdle();\n                this.gameplayContainer.add(this.character);\n                let randomized = this.gameplay.allWorlds.slice(); //Phaser.Utils.Array.Shuffle(this.gameplay.allWorlds.slice());\n                this.words = [];\n                let positions = [\n                    { x: 68, y: 174 }, { x: 235, y: 72 }, { x: 461, y: 98 }, { x: 367, y: 253 }, { x: 674, y: 52 }, { x: 605, y: 226 }, { x: 429, y: 416 }, { x: 654, y: 390 }\n                ];\n                for (let i = 0; i < randomized.length; i++) {\n                    let w = new Phaser.GameObjects.Container(this.scene, positions[i]['x'] + 20 + 83, positions[i]['y'] + 23 + 65);\n                    w.add(w[\"-image-\"] = this.scene.add.sprite(0, 0, null));\n                    w[\"-image-\"].setOrigin(0.5, 0.5);\n                    this.words.push(w);\n                    let txt;\n                    if (this.gameplay.useImages) {\n                        txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomized[i][\"imageKey\"]);\n                        w.add(txt);\n                    }\n                    else {\n                        txt = this.scene.add.text(0, -5, \"\", {\n                            \"fontFamily\": \"Quran Era font\",\n                            \"fontSize\": 55,\n                            \"color\": \"#000000\",\n                            \"align\": 'center'\n                        });\n                        txt.setOrigin(0.5, 0.5);\n                        txt.style.fixedHeight = 75;\n                        txt.setText(randomized[i][\"word\"]);\n                        w.add(txt);\n                    }\n                    w[\"-letter-\"] = txt;\n                    w[\"-word-text-\"] = randomized[i][\"word\"];\n                    this.gameplayContainer.add(w);\n                    Preloader.playAnim('bubble_idle', w[\"-image-\"]);\n                }\n                for (let word of this.words) {\n                    word.setSize(word[\"-image-\"].width, word[\"-image-\"].height);\n                    word.setInteractive({ cursor: 'pointer' });\n                    word.on('pointerdown', () => {\n                        this.setInputEnabled(false);\n                        if (word[\"-word-text-\"] == this.gameplay.currentWordData[\"word\"]) {\n                            this.onCorrectAnswer();\n                            word.parentContainer.remove(word);\n                            this.showPopBubble(word);\n                            // this.fadeBubblesOut();\n                            this.tfCorrectAnswerCount.setText(String(this.gameplay.correctAnswersCount));\n                        }\n                        else {\n                            let lost = this.onWrongAnswer();\n                            this.shakeBubble(word);\n                            delayedCall(500, () => {\n                                this.destroyIdleDelayedCallIfExists();\n                                Preloader.playAnim('turtle_shock_in', this.character, () => {\n                                    delayedCall(800, () => {\n                                        Preloader.playAnim('turtle_shock_out', this.character, this.playIdle);\n                                    });\n                                });\n                                this.scene.sound.add(\"Turtle animation sfx\").play();\n                            });\n                            delayedCall(3200, () => {\n                                if (!lost) {\n                                    this.setInputEnabled(true);\n                                }\n                            });\n                            this.tfWrongAnswerCount.setText(String(this.gameplay.wrongAnswersCount));\n                        }\n                    });\n                }\n                this._btnClose.setInteractive({ cursor: 'pointer', pixelPerfect: true });\n                this.setInputEnabled(false);\n                this.tfCorrectAnswerCount = this.scene.add.text(game.scale.width / 2 - 118, 29, \"0\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 20,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.gameplayContainer.add(this.tfCorrectAnswerCount);\n                this.tfWrongAnswerCount = this.scene.add.text(game.scale.width / 2 - 26, 29, \"0\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 20,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.gameplayContainer.add(this.tfWrongAnswerCount);\n                this.tfTimer = this.scene.add.text(game.scale.width / 2 + 73, 29, \"00:00\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 20,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.gameplayContainer.add(this.tfTimer);\n                let seconds = 120;\n                this.renderTimer(seconds);\n                this.timerEvent = this.scene.time.addEvent({ delay: 1000, repeat: seconds });\n                this.timerEvent.callback = () => {\n                    if (this.timerEvent.repeatCount == 0) {\n                        this.showLoseWindow(0, 0);\n                    }\n                    this.renderTimer(this.timerEvent.repeatCount);\n                };\n            }\n            renderTimer(seconds) {\n                let sec = seconds % 60;\n                let min = Math.round((seconds - sec) / 60);\n                this.tfTimer.setText((min < 10 ? '0' + min : min)\n                    + \":\" +\n                    (sec < 10 ? '0' + sec : sec));\n            }\n            showPopBubble(bubble) {\n                let bubble_poping = this.scene.add.sprite(bubble.x, bubble.y, null);\n                this.gameplayContainer.add(bubble_poping);\n                Preloader.playAnim('bubble_poping', bubble_poping, () => {\n                    if (bubble_poping.parentContainer)\n                        bubble_poping.parentContainer.remove(bubble_poping);\n                });\n            }\n            shakeBubble(bubble) {\n                this.scene.tweens.add({\n                    targets: bubble,\n                    x: bubble.x - 5,\n                    duration: 100,\n                    yoyo: true,\n                    repeat: 5\n                });\n                this.scene.tweens.add({\n                    targets: bubble,\n                    y: bubble.y + 5,\n                    duration: 70,\n                    yoyo: true,\n                    repeat: 5\n                });\n            }\n            addIdleAnim(bubble) {\n                this.scene.tweens.add({\n                    targets: bubble,\n                    \"scaleX\": 0.95,\n                    duration: 1000,\n                    yoyo: true,\n                    repeat: -1\n                });\n                this.scene.tweens.add({\n                    targets: bubble,\n                    \"scaleY\": 0.97,\n                    duration: 800,\n                    yoyo: true,\n                    repeat: -1\n                });\n            }\n            prepareRound() {\n                delayedCall(750, () => {\n                    this.playCorrectAudio();\n                    delayedCall(750, () => { this.setInputEnabled(true); });\n                });\n            }\n            onNewRound(showOut) {\n                this.setInputEnabled(false);\n                if (showOut) {\n                    this.prepareRound();\n                }\n            }\n            onCorrectAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                let completed = this.gameplay.onCorrectAnswer();\n                this.scene.sound.add(this.sfxBubblePopCounter++ % 2 == 0 ? 'Bubble Pop 1' : 'Bubble Pop 2').play();\n                return completed;\n            }\n            onWrongAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                let lost = this.gameplay.onWrongAnswer();\n                this.scene.sound.add(\"Wrong click\").play();\n                this.destroyIdleDelayedCallIfExists();\n                if (!lost)\n                    delayedCall(2500, () => { this.playCorrectAudio(); });\n                return lost;\n            }\n            onCloseClick() {\n                this.showAreYouSurePage();\n                this.scene.sound.add('warning page pop up sfx').play();\n            }\n            showInstructionPage() {\n                setPageBackground(\"bg-blue\");\n                let playInstructionSound = () => {\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                    this.wfsnd = this.scene.sound.add(\"Help Salty\");\n                    this.wfsnd.play();\n                };\n                this.instructionPage = new screen.InstructionPage(this.scene, (target) => {\n                    playBtnClickAnim(target);\n                    this.remove(this.instructionPage);\n                    this.showGameplay();\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                }, (target) => {\n                    playBtnClickAnim(target);\n                    playInstructionSound();\n                });\n                this.add(this.instructionPage);\n                playInstructionSound();\n            }\n            showAreYouSurePage() {\n                pauseAllDelayedCalls();\n                setPageBackground(\"bg-blue\");\n                this.scene.tweens.pauseAll();\n                this.pauseSounds();\n                this.areYouSureWindow = new screen.AreYouSureWindow(this.scene, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.destroyGameplay();\n                    this.showInstructionPage();\n                }, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.unpauseSounds();\n                    resumeAllDelayedCalls();\n                    setPageBackground(\"bg-australia\");\n                });\n                this.add(this.areYouSureWindow);\n            }\n            setInputEnabled(enabled) {\n                if (enabled) {\n                    for (let a of this.words)\n                        a.setInteractive({ cursor: 'pointer' });\n                }\n                else {\n                    for (let a of this.words)\n                        a.disableInteractive();\n                }\n            }\n            pauseSounds() {\n                this.scene.sound.pauseAll();\n            }\n            unpauseSounds() {\n                this.scene.sound.resumeAll();\n            }\n            destroyGameplay() {\n                this.setInputEnabled(false);\n                this.remove(this.gameplayContainer);\n                this.scene.sound.stopAll();\n                destroyAllDelayedCalls();\n            }\n        }\n        screen.GameplayScreen = GameplayScreen;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class InstructionPage extends Phaser.GameObjects.Container {\n            constructor(scene, onPlayClick, onSndClick) {\n                super(scene);\n                this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0 - 105, 0 - 48, 'Instructions page  ALL ACTIVITY  TITLEs');\n                this._instructionPage.setOrigin(0, 0);\n                this._instructionPage.setInteractive();\n                this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'pop-the-bubbles-title');\n                this._instructionPageTitle.setScale(0.65);\n                this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\n                this._btnPlay.setInteractive({ cursor: 'pointer' });\n                this._btnPlay.once('pointerup', onPlayClick);\n                setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\n                this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Help Salty Turtle pop all the word bubbles.\\nListen to the word and tap on the bubble.\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 30,\n                    \"color\": \"#43425D\",\n                    \"align\": 'center'\n                });\n                this.instrTxt.setOrigin(0.5, 0.5);\n                this.instrTxt.setWordWrapWidth(710);\n                this.instrTxt.setLineSpacing(10);\n                this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\n                this._btnSoundInstruction.setInteractive({ cursor: 'pointer' });\n                this._btnSoundInstruction.on('pointerup', onSndClick);\n                this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\n                setupButtonTextureBased(this._btnSoundInstruction, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._instructionPage);\n                this.add(this._instructionPageTitle);\n                this.add(this.instrTxt);\n                this.add(this._btnPlay);\n                this.add(this._btnSoundInstruction);\n            }\n        }\n        screen.InstructionPage = InstructionPage;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class TryAgainWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-106, -48);\n                this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\n                this._bg.setOrigin(0, 0);\n                this._bg.setInteractive();\n                this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\n                this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bg,\n                    this._star,\n                    this._btnBack,\n                    this._btnReplay,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n            }\n            show(score, starScore) {\n                this._star.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._star,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                this.music = this.scene.sound.add(\"Fail - close one\");\n                this.music.play();\n            }\n        }\n        screen.TryAgainWindow = TryAgainWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\n","namespace ctb {\r\n    export class App extends Phaser.Game {\r\n\r\n        public static readonly CANVAS_WIDTH: number = 980;\r\n        public static readonly CANVAS_HEIGHT: number = 600;\r\n\r\n        constructor() {\r\n            let config: Phaser.Types.Core.GameConfig = {\r\n                type: Phaser.AUTO,\r\n                width: App.CANVAS_WIDTH,\r\n                height: App.CANVAS_HEIGHT,\r\n                scale: {\r\n                    mode: FitScaleManager.detectBestScaleMode(),\r\n                    autoCenter: Phaser.Scale.CENTER_BOTH\r\n                },\r\n                transparent: true,\r\n                scene: {\r\n                    create: () => {\r\n                        this.scene.add('Boot', ctb.scene.Boot, true);\r\n                    }\r\n                }\r\n            };\r\n            super(config);\r\n        }\r\n    }\r\n}\r\n\r\nlet game: ctb.App;\r\nwindow.onload = () => {\r\n    game = new ctb.App();\r\n};\r\n\r\nlet delayedCalls = [];\r\nfunction delayedCall(delay: number, callback: Function, args?: any[], callbackScope?: any): Phaser.Time.TimerEvent | number {\r\n    let scene = game.scene.getAt(0);\r\n    if (scene) {\r\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\r\n        delayedCalls.push(dc);\r\n        return dc;\r\n    }\r\n    let t = setTimeout(callback, delay);\r\n    delayedCalls.push(t);\r\n    return t;\r\n}\r\nfunction pauseAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = true;\r\n        }\r\n    }\r\n}\r\nfunction resumeAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = false;\r\n        }\r\n    }\r\n}\r\nfunction destroyAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).remove(false);\r\n        } else {\r\n            clearTimeout(dc);\r\n        }\r\n    }\r\n    delayedCalls = [];\r\n}\r\nfunction destroyDelayedCall(dc) {\r\n    if (dc instanceof Phaser.Time.TimerEvent) {\r\n        (dc as Phaser.Time.TimerEvent).remove(false);\r\n    } else {\r\n        clearTimeout(dc);\r\n    }\r\n    let ind = delayedCalls.indexOf(dc);\r\n    if (ind >= 0) delayedCalls.splice(ind, 1);\r\n}\r\n\r\nfunction setPageBackground(bg: string) {\r\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\r\n}\r\n\r\nfunction setupButton(btn, frame) {\r\n    btn.on('pointerdown', ()=>{btn.setFrame(frame + '_hover' + '0000')});\r\n    btn.on('pointerover', ()=>{btn.setFrame(frame + '_hover' + '0000');game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setFrame(frame + '0000')});\r\n    btn.on('pointerup', ()=>{btn.setFrame(frame + '0000');game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\nfunction setupButtonTextureBased(btn:Phaser.GameObjects.Image, texture, hoverTexture) {\r\n    btn.on('pointerdown', ()=>{btn.setTexture(hoverTexture)});\r\n    btn.on('pointerover', ()=>{btn.setTexture(hoverTexture);game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setTexture(texture)});\r\n    btn.on('pointerup', ()=>{btn.setTexture(texture);game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\n\r\n\r\n\r\nfunction playBtnClickAnim(target): void {\r\n    let sc:number = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\r\n    target.scaleX = target.scaleY = sc;\r\n    let scene = game.scene.getAt(0);\r\n    scene.tweens.add({\r\n        targets: target,\r\n        \"scaleX\": 0.9 * sc,\r\n        \"scaleY\": 0.9 * sc,\r\n        duration: 100,\r\n        yoyo: true\r\n    });\r\n}","namespace ctb.screen {\r\n    export class TryAgainWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bg:Phaser.GameObjects.Image;\r\n        _star:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-106, -48);\r\n\r\n            this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\r\n            this._bg.setOrigin(0, 0);\r\n            this._bg.setInteractive();\r\n            this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bg,\r\n                this._star,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._star.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._star,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            this.music = this.scene.sound.add(\"Fail - close one\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","/**\r\n * @author Roman Parada\r\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\r\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\r\n *\r\n * How to use:\r\n * Just call the code line below in Boot scene's init() method of your project:\r\n * new FitScaleManager(this.game).setup();\r\n */\r\nclass FitScaleManager {\r\n\r\n    public static detectBestScaleMode():integer {\r\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\r\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\r\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\r\n    };\r\n\r\n    private static RESIZE_DELAY: number = 500;\r\n\r\n    private game: Phaser.Game;\r\n\r\n    private canvasStyle: CSSStyleDeclaration;\r\n    private phaserScaleManager: Phaser.Scale.ScaleManager;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n\r\n        this.canvasStyle = this.game.canvas.style;\r\n        this.phaserScaleManager = this.game.scale;\r\n    }\r\n\r\n    /**\r\n     * Just call this method once in Boot scene's init() method\r\n     */\r\n    public setup(): void {\r\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\r\n\r\n        this.overridePhaserTransformMethods();\r\n\r\n        this.onResize();\r\n    }\r\n\r\n    private calculateScale(): number {\r\n        if (game.scale.scaleMode == Phaser.Scale.NONE) return 1;\r\n\r\n        return Math.min(\r\n            window.innerWidth / this.phaserScaleManager.width,\r\n            window.innerHeight / this.phaserScaleManager.height\r\n        );\r\n    }\r\n\r\n    private overridePhaserTransformMethods(): void {\r\n        this.game.scale.transformX = (pageX: number) => {\r\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n        this.game.scale.transformY = (pageY: number) => {\r\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n    }\r\n\r\n    private onResize(): void {\r\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\r\n    }\r\n\r\n    private doResize: () => void = () => {\r\n        let scale: number = this.calculateScale();\r\n\r\n        let newCanvasWidth: number = this.phaserScaleManager.width * scale;\r\n        let newCanvasHeight: number = this.phaserScaleManager.height * scale;\r\n\r\n        this.canvasStyle.width = newCanvasWidth + 'px';\r\n        this.canvasStyle.height = newCanvasHeight + 'px';\r\n\r\n        this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\r\n        this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\r\n    };\r\n}","namespace ctb.core {\r\n    export class Gameplay {\r\n        public totalRoundsNum:number;\r\n        public readonly failsNumToLose:number;\r\n\r\n        private currentRound:number = 0;\r\n        public allWorlds:object[];\r\n        public words:object[];\r\n        public currentWordData:object;\r\n        public correctAnswersCount: number = 0;\r\n        public wrongAnswersCount: number = 0;\r\n        public correctAnswersCountThisRound: number = 0;\r\n        public wrongAnswersCountThisRound: number = 0;\r\n\r\n        private onComplete:(score:number, starScore:number)=>void;\r\n        private onLose:(score:number, starScore:number)=>void;\r\n        private onNewRound:()=>void = null;\r\n\r\n        public useImages:boolean;\r\n\r\n        constructor() {\r\n            this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\r\n            this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\r\n        }\r\n\r\n        public setupCallbacks(onComplete:(score:number, starScore:number)=>void, onLose:(score:number, starScore:number)=>void, onNewRound:()=>void):void {\r\n            this.onComplete = onComplete;\r\n            this.onLose = onLose;\r\n            this.onNewRound = onNewRound;\r\n        }\r\n\r\n        public calculateScore():number {\r\n            return this.totalRoundsNum - this.wrongAnswersCount;\r\n        }\r\n\r\n        public onLetterChosen():boolean {\r\n            if (this.correctAnswersCountThisRound == 1) {\r\n                this.currentRound++;\r\n                if (this.currentRound >= this.totalRoundsNum) {\r\n                    let score:number = this.calculateScore();\r\n                    this.onComplete(score, score);\r\n                    return true;\r\n                } else {\r\n                    this.nextLetter();\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public nextLetterDelay:number = 0;\r\n        public nextLetter():void {\r\n            let fn:()=>void = ()=>{\r\n                this.currentWordData = Phaser.Utils.Array.RemoveRandomElement(this.words);\r\n\r\n                this.correctAnswersCountThisRound = 0;\r\n                this.wrongAnswersCountThisRound = 0;\r\n\r\n                if (this.onNewRound) this.onNewRound();\r\n            };\r\n            if (this.nextLetterDelay == 0) {\r\n                fn();\r\n            } else {\r\n                delayedCall(this.nextLetterDelay, fn);\r\n            }\r\n        }\r\n\r\n        public onCorrectAnswer(): boolean {\r\n            this.correctAnswersCount++;\r\n            this.correctAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 1500;\r\n\r\n            return this.onLetterChosen();\r\n        }\r\n\r\n        public onWrongAnswer(): boolean {\r\n            this.wrongAnswersCount++;\r\n            this.wrongAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 0;\r\n\r\n            if (this.wrongAnswersCount >= this.failsNumToLose) {\r\n                this.onLose(0, 0);\r\n                return true;\r\n            } else {\r\n                this.onLetterChosen();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCount(): number {\r\n            return this.correctAnswersCount + this.wrongAnswersCount;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCountThisRound(): number {\r\n            return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\r\n        }\r\n\r\n        public isNewRound():boolean {\r\n            return this.getCurrentTotalAnswersCountThisRound() == 0;\r\n        }\r\n\r\n        public isRoundsComplete():boolean {\r\n            return this.currentRound >= this.totalRoundsNum;\r\n        }\r\n\r\n        public reset():void {\r\n            this.nextLetterDelay = 0;\r\n            this.setupCallbacks(null, null, null);\r\n\r\n            let json = game.cache.json.get('gameplay');\r\n            this.words = json[\"words\"].slice();\r\n            this.allWorlds = json[\"words\"].slice();\r\n            this.totalRoundsNum = this.words.length;\r\n\r\n            this.nextLetter();\r\n\r\n            this.currentRound = 0;\r\n            this.correctAnswersCount = 0;\r\n            this.wrongAnswersCount = 0;\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n    export class Boot extends Phaser.Scene {\r\n        init() {\r\n            new FitScaleManager(this.game).setup();\r\n        }\r\n\r\n        create() {\r\n            game.scene.remove('Boot');\r\n            game.scene.add('Preloader', ctb.scene.Preloader, true);\r\n        }\r\n    }\r\n}","namespace ctb.scene {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import GameplayScreen = ctb.screen.GameplayScreen;\r\n\r\n    export class MainScene extends Phaser.Scene {\r\n\r\n        private gameplay:Gameplay;\r\n        private gameplayScreen:GameplayScreen;\r\n\r\n        public create():void {\r\n            this.gameplay = new Gameplay();\r\n\r\n            this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\r\n            this.children.add(this.gameplayScreen);\r\n            this.gameplayScreen.showInstructionPage();\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n\r\n    export class Preloader extends Phaser.Scene {\r\n\r\n        public static readonly ANIMS_DATA:object = {\r\n            'bubble_poping': {\r\n                'start': 0,\r\n                'end': 26,\r\n                'padNum': 4,\r\n                'prefix': 'bubble_poping',\r\n                'repeat': 0,\r\n                'frameRate': 24,\r\n                'atlas': 'bubble-atlas'\r\n            },\r\n            'bubble_idle': {\r\n                'start': 0,\r\n                'end': 50,\r\n                'padNum': 4,\r\n                'prefix': 'idle',\r\n                'repeat': -1,\r\n                'frameRate': 24,\r\n                'atlas': 'bubble-atlas'\r\n            },\r\n            'turtle_idle': {\r\n                'start': 0,\r\n                'end': 35,\r\n                'padNum': 4,\r\n                'prefix': 'turtle_idle',\r\n                'repeat': 0,\r\n                'frameRate': 24,\r\n                'atlas': 'turtle-idle-atlas'\r\n            },\r\n            'turtle_shock_in': {\r\n                'start': 0,\r\n                'end': 16,\r\n                'padNum': 4,\r\n                'prefix': 'turtle_shock',\r\n                'repeat': 0,\r\n                'frameRate': 24,\r\n                'atlas': 'turtle_shock-atlas'\r\n            },\r\n            'turtle_shock_out': {\r\n                'start': 16,\r\n                'end': 32,\r\n                'padNum': 4,\r\n                'prefix': 'turtle_shock',\r\n                'repeat': 0,\r\n                'frameRate': 24,\r\n                'atlas': 'turtle_shock-atlas'\r\n            },\r\n        };\r\n\r\n        preload() {\r\n            this.load.json('gameplay', 'assets/json/gameplay.json');\r\n        }\r\n\r\n        create() {\r\n            let json = game.cache.json.get('gameplay');\r\n            if (json[\"useImages\"]) {\r\n                for (let w of json[\"words\"]) {\r\n                    this.load.image(w[\"letterName\"], \"assets/imgs/words/\"+w[\"imageKey\"]+\".png\");\r\n                }\r\n            }\r\n            for (let w of json[\"words\"]) {\r\n                this.load.audio(w[\"audioKey\"], \"assets/sound/mp3/words/\"+w[\"audioKey\"]+\".mp3\");\r\n            }\r\n\r\n            let progressTxt:Phaser.GameObjects.Text = this.add.text(game.scale.width/2, game.scale.height/2, \"\", {\r\n                \"fontFamily\": \"Quran Era font\",\r\n                \"fontSize\": 25,\r\n                \"color\": \"#000000\",\r\n                \"align\": 'center'\r\n            });\r\n            progressTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.load.pack('preloader', 'assets/pack.json');\r\n\r\n            this.load.on('progress', (value:number) => {\r\n                progressTxt.text = Math.ceil(value * 100) + \"%\";\r\n            }, this);\r\n\r\n            this.load.on('complete', () => {\r\n                this.nextScene();\r\n            });\r\n\r\n            this.load.start();\r\n        }\r\n\r\n        public static playAnim(animKey:string, sprite:Phaser.GameObjects.Sprite, onComplete:()=>void = null):Phaser.GameObjects.Sprite {\r\n            let mainScene = game.scene.getScene('ScreenMain');\r\n            if (!mainScene.anims.exists(animKey)) {\r\n                let data = Preloader.ANIMS_DATA[animKey];\r\n                mainScene.anims.create({\r\n                    key: animKey,\r\n                    frames: mainScene.anims.generateFrameNames(data['atlas'], {\r\n                        start: data['start'], end: data['end'], zeroPad: data['padNum'],\r\n                        prefix: data['prefix'], suffix: ''\r\n                    }),\r\n                    frameRate: data['frameRate'],\r\n                    repeat: data['repeat']\r\n                });\r\n            }\r\n            if (sprite.anims.currentAnim) {\r\n                sprite.anims.currentAnim.off('complete');\r\n            }\r\n            sprite.anims.stop();\r\n            sprite.play(animKey);\r\n            sprite.anims.currentAnim.once('complete', ()=>{\r\n                if (onComplete) onComplete();\r\n            });\r\n            return sprite;\r\n        }\r\n\r\n        private nextScene():void {\r\n            game.scene.remove('Preloader');\r\n            game.scene.add('ScreenMain', ctb.scene.MainScene, true);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class AreYouSureWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _areYouSurePage: Phaser.GameObjects.Image;\r\n        private _btnSureYes: Phaser.GameObjects.Image;\r\n        private _btnSureNo: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene, onYes:()=>void, onNo:()=>void) {\r\n            super(scene);\r\n\r\n            this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0-48, 'Exit warning');\r\n            this._areYouSurePage.setOrigin(0, 0);\r\n            this._areYouSurePage.setInteractive();\r\n\r\n            this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485-50, 'btnYES1');\r\n            this._btnSureYes.setInteractive({cursor: 'pointer'});\r\n            this._btnSureYes.once('pointerup', onYes);\r\n            setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\r\n\r\n            this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485-50, 'btnNO1');\r\n            this._btnSureNo.setInteractive({cursor: 'pointer'});\r\n            this._btnSureNo.once('pointerup', onNo);\r\n            setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\r\n\r\n            this.add(this._areYouSurePage);\r\n            this.add(this._btnSureYes);\r\n            this.add(this._btnSureNo);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class CompleteWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bgComplete:Phaser.GameObjects.Image;\r\n        _cup:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n        _btnNext:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void, onNext:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-104.5, -48);\r\n\r\n            this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\r\n            this._bgComplete.setOrigin(0, 0);\r\n            this._bgComplete.setInteractive();\r\n            this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\r\n            this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\r\n\r\n            let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bgComplete,\r\n                _CollectedPoints,\r\n                this._cup,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this._btnNext,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n            this._btnNext.setInteractive({cursor: 'pointer'});\r\n            this._btnNext.on('pointerup', ()=>{\r\n                onNext(this._btnNext);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._cup.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._cup,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            // let music = this.scene.sound.add(\"viktory\");\r\n            this.music = this.scene.sound.add(\"Activity completion fantastic\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import Preloader = ctb.scene.Preloader;\r\n\r\n    export class GameplayScreen extends Phaser.GameObjects.Container {\r\n        _gameStage: Phaser.GameObjects.Image;\r\n        _btnClose: Phaser.GameObjects.Image;\r\n\r\n        private gameplayContainer: Phaser.GameObjects.Container;\r\n\r\n        gameplay: Gameplay;\r\n\r\n        _btnSound: Phaser.GameObjects.Image;\r\n\r\n        words:Phaser.GameObjects.Container[];\r\n\r\n        private bgMusic:any = null;\r\n\r\n        private character:Phaser.GameObjects.Sprite;\r\n\r\n        private tfCorrectAnswerCount:Phaser.GameObjects.Text;\r\n        private tfWrongAnswerCount:Phaser.GameObjects.Text;\r\n        private tfTimer:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, gameplay: Gameplay) {\r\n            super(scene);\r\n            this.gameplay = gameplay;window[\"gs\"]=this;\r\n\r\n            this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\r\n            this._gameStage.setOrigin(0.5, 0.5);\r\n            this._gameStage.setScale(1.02);\r\n            this._gameStage.setInteractive();\r\n            this.add(this._gameStage);\r\n\r\n            this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025-105, 100-50,'x Button');\r\n            this._btnClose.setInteractive({cursor: 'pointer'});\r\n            this._btnClose[\"defScale\"] = this._btnClose.scale;\r\n            setupButtonTextureBased(this._btnClose, 'x Button','x Button HOVER EFFECT');\r\n            this.add(this._btnClose);\r\n            this._btnClose.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnClose);\r\n\r\n                this.onCloseClick();\r\n            });\r\n            this._btnSound = new Phaser.GameObjects.Image(this.scene, 160-105, 100-50, 'Sound');\r\n            this._btnSound.setInteractive({cursor: 'pointer'});\r\n            this._btnSound[\"defScale\"] = this._btnSound.scale;\r\n            setupButtonTextureBased(this._btnSound, 'Sound','Sound HOVER EFFECT');\r\n            this.add(this._btnSound);\r\n            this._btnSound.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnSound);\r\n\r\n                this.onSoundClick();\r\n            });\r\n        }\r\n\r\n\r\n        private correctAudio = null;\r\n        private playCorrectAudio():void {\r\n            if (this.correctAudio) {\r\n                this.correctAudio.stop();\r\n            }\r\n            this.correctAudio = this.scene.sound.add(this.gameplay.currentWordData[\"word\"]);\r\n            this.correctAudio.play();\r\n            if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                this.correctAudio.pause();\r\n            }\r\n        }\r\n\r\n        public onSoundClick(): void {\r\n            this.playCorrectAudio();\r\n        }\r\n\r\n        private idleDelayedCall = null;\r\n        private playIdle:()=>void = ()=>{\r\n            Preloader.playAnim('turtle_idle', this.character, ()=> {\r\n                this.idleDelayedCall = delayedCall(Math.floor(Math.random()*5)*500, this.playIdle);\r\n            });\r\n        };\r\n        private destroyIdleDelayedCallIfExists():void {\r\n            if (this.idleDelayedCall != null) {\r\n                destroyDelayedCall(this.idleDelayedCall);\r\n                this.idleDelayedCall = null;\r\n            }\r\n        }\r\n\r\n        public showGameplay(): void {\r\n            setPageBackground(\"bg-australia\");\r\n\r\n            this.bgMusic = this.scene.sound.add(\"Bachground ambience\");\r\n            this.bgMusic.play();\r\n            this.bgMusic.loop = true;\r\n\r\n            this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\r\n            this.addAt(this.gameplayContainer, this.getIndex(this._btnClose));\r\n\r\n            this.gameplay.reset();\r\n\r\n            this.createRounds();\r\n            this.prepareRound();\r\n            this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, ()=>{\r\n                this.onNewRound(true);\r\n            });\r\n        }\r\n\r\n        public createRounds():void {\r\n            this.gameplayContainer.removeAll();\r\n\r\n            this.character = this.scene.add.sprite(205, 435, null);\r\n            this.playIdle();\r\n            this.gameplayContainer.add(this.character);\r\n\r\n            let randomized:object[] = this.gameplay.allWorlds.slice();//Phaser.Utils.Array.Shuffle(this.gameplay.allWorlds.slice());\r\n            this.words = [];\r\n            let positions = [\r\n                {x:68, y:174},{x:235, y:72},{x:461, y:98},{x:367, y:253},{x:674, y:52},{x:605, y:226},{x:429, y:416},{x:654, y:390}\r\n            ];\r\n            for (let i:number = 0; i < randomized.length; i++) {\r\n                let w:Phaser.GameObjects.Container = new Phaser.GameObjects.Container(this.scene, positions[i]['x']+20+83, positions[i]['y']+23+65);\r\n                w.add(w[\"-image-\"] = this.scene.add.sprite(0, 0, null));\r\n                w[\"-image-\"].setOrigin(0.5, 0.5);\r\n                this.words.push(w);\r\n\r\n                let txt:Phaser.GameObjects.Text | Phaser.GameObjects.Image;\r\n                if (this.gameplay.useImages) {\r\n                    txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomized[i][\"imageKey\"]);\r\n                    w.add(txt);\r\n                } else {\r\n                    txt = this.scene.add.text(0, -5, \"\", {\r\n                        \"fontFamily\": \"Quran Era font\",\r\n                        \"fontSize\": 55 as any,\r\n                        \"color\": \"#000000\",\r\n                        \"align\": 'center'\r\n                    });\r\n                    txt.setOrigin(0.5, 0.5);\r\n                    txt.style.fixedHeight = 75;\r\n                    txt.setText(randomized[i][\"word\"]);\r\n                    w.add(txt);\r\n                }\r\n\r\n                w[\"-letter-\"] = txt;\r\n                w[\"-word-text-\"] = randomized[i][\"word\"];\r\n                this.gameplayContainer.add(w);\r\n\r\n                Preloader.playAnim('bubble_idle', w[\"-image-\"]);\r\n            }\r\n\r\n            for (let word of this.words) {\r\n                word.setSize(word[\"-image-\"].width, word[\"-image-\"].height);\r\n                word.setInteractive({cursor: 'pointer'});\r\n\r\n                word.on('pointerdown', () => {\r\n                    this.setInputEnabled(false);\r\n\r\n                    if (word[\"-word-text-\"] == this.gameplay.currentWordData[\"word\"]) {\r\n                        this.onCorrectAnswer();\r\n\r\n                        word.parentContainer.remove(word);\r\n                        this.showPopBubble(word);\r\n\r\n                        // this.fadeBubblesOut();\r\n\r\n                        this.tfCorrectAnswerCount.setText(String(this.gameplay.correctAnswersCount));\r\n                    } else {\r\n                        let lost:boolean = this.onWrongAnswer();\r\n\r\n                        this.shakeBubble(word);\r\n\r\n                        delayedCall(500, ()=>{\r\n                            this.destroyIdleDelayedCallIfExists();\r\n                            Preloader.playAnim('turtle_shock_in', this.character, ()=>{\r\n                                delayedCall(800, ()=>{\r\n                                    Preloader.playAnim('turtle_shock_out', this.character, this.playIdle);\r\n                                });\r\n                            });\r\n                            this.scene.sound.add(\"Turtle animation sfx\").play();\r\n                        });\r\n\r\n                        delayedCall(3200, ()=>{\r\n                            if (!lost) {\r\n                                this.setInputEnabled(true);\r\n                            }\r\n                        });\r\n\r\n                        this.tfWrongAnswerCount.setText(String(this.gameplay.wrongAnswersCount));\r\n                    }\r\n                });\r\n            }\r\n\r\n            this._btnClose.setInteractive({cursor: 'pointer', pixelPerfect:true});\r\n\r\n            this.setInputEnabled(false);\r\n\r\n            this.tfCorrectAnswerCount = this.scene.add.text(game.scale.width/2-118, 29, \"0\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 20 as any,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.gameplayContainer.add(this.tfCorrectAnswerCount);\r\n            this.tfWrongAnswerCount = this.scene.add.text(game.scale.width/2-26, 29, \"0\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 20 as any,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.gameplayContainer.add(this.tfWrongAnswerCount);\r\n            this.tfTimer = this.scene.add.text(game.scale.width/2+73, 29, \"00:00\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 20 as any,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.gameplayContainer.add(this.tfTimer);\r\n\r\n            let seconds:number = 120;\r\n            this.renderTimer(seconds);\r\n            this.timerEvent = this.scene.time.addEvent({ delay: 1000, repeat: seconds });\r\n            this.timerEvent.callback = ()=>{\r\n                if (this.timerEvent.repeatCount == 0) {\r\n                    this.showLoseWindow(0, 0);\r\n                }\r\n                this.renderTimer(this.timerEvent.repeatCount);\r\n            };\r\n        }\r\n\r\n        private timerEvent: Phaser.Time.TimerEvent;\r\n\r\n        private renderTimer(seconds:number):void {\r\n            let sec:number = seconds % 60;\r\n            let min:number = Math.round((seconds - sec) / 60);\r\n            this.tfTimer.setText((min < 10 ? '0'+min:min)\r\n                +\":\"+\r\n                (sec < 10 ? '0'+sec:sec));\r\n        }\r\n\r\n        private showPopBubble(bubble) {\r\n            let bubble_poping = this.scene.add.sprite(bubble.x, bubble.y, null);\r\n            this.gameplayContainer.add(bubble_poping);\r\n            Preloader.playAnim('bubble_poping', bubble_poping, ()=>{\r\n                if (bubble_poping.parentContainer) bubble_poping.parentContainer.remove(bubble_poping);\r\n            });\r\n        }\r\n\r\n        private shakeBubble(bubble) {\r\n            this.scene.tweens.add({\r\n                targets: bubble,\r\n                x: bubble.x-5,\r\n                duration: 100,\r\n                yoyo: true,\r\n                repeat: 5\r\n            });\r\n            this.scene.tweens.add({\r\n                targets: bubble,\r\n                y: bubble.y+5,\r\n                duration: 70,\r\n                yoyo: true,\r\n                repeat: 5\r\n            });\r\n        }\r\n\r\n        private addIdleAnim(bubble) {\r\n            this.scene.tweens.add({\r\n                targets: bubble,\r\n                \"scaleX\": 0.95,\r\n                duration: 1000,\r\n                yoyo: true,\r\n                repeat: -1\r\n            });\r\n            this.scene.tweens.add({\r\n                targets: bubble,\r\n                \"scaleY\": 0.97,\r\n                duration: 800,\r\n                yoyo: true,\r\n                repeat: -1\r\n            });\r\n        }\r\n\r\n        public prepareRound():void {\r\n            delayedCall(750, ()=>{\r\n                this.playCorrectAudio();\r\n\r\n                delayedCall(750, ()=>{this.setInputEnabled(true);});\r\n            });\r\n        }\r\n\r\n        private onNewRound(showOut:boolean):void {\r\n            this.setInputEnabled(false);\r\n\r\n            if (showOut) {\r\n                this.prepareRound();\r\n            }\r\n        }\r\n\r\n        private sfxBubblePopCounter:number = 0;\r\n        public onCorrectAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n\r\n            let completed:boolean = this.gameplay.onCorrectAnswer();\r\n\r\n            this.scene.sound.add(this.sfxBubblePopCounter++%2==0?'Bubble Pop 1':'Bubble Pop 2').play();\r\n\r\n            return completed;\r\n        }\r\n\r\n        public onWrongAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n\r\n            let lost:boolean = this.gameplay.onWrongAnswer();\r\n\r\n            this.scene.sound.add(\"Wrong click\").play();\r\n\r\n            this.destroyIdleDelayedCallIfExists();\r\n\r\n            if (!lost) delayedCall(2500, ()=>{this.playCorrectAudio();});\r\n\r\n            return lost;\r\n        }\r\n\r\n        public onCloseClick(): void {\r\n            this.showAreYouSurePage();\r\n            this.scene.sound.add('warning page pop up sfx').play();\r\n        }\r\n\r\n        private wfsnd = null;\r\n        private instructionPage: InstructionPage;\r\n        public showInstructionPage(): void {\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            let playInstructionSound:()=>void = ()=>{\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n                this.wfsnd = this.scene.sound.add(\"Help Salty\");\r\n                this.wfsnd.play();\r\n            };\r\n\r\n            this.instructionPage = new InstructionPage(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.remove(this.instructionPage);\r\n                this.showGameplay();\r\n\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n            },(target) => {\r\n                playBtnClickAnim(target);\r\n                playInstructionSound();\r\n            });\r\n            this.add(this.instructionPage);\r\n            playInstructionSound();\r\n        }\r\n\r\n        private areYouSureWindow:AreYouSureWindow;\r\n        public showAreYouSurePage(): void {\r\n            pauseAllDelayedCalls();\r\n            setPageBackground(\"bg-blue\");\r\n            this.scene.tweens.pauseAll();\r\n\r\n            this.pauseSounds();\r\n\r\n            this.areYouSureWindow = new AreYouSureWindow(this.scene, ()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.destroyGameplay();\r\n                this.showInstructionPage();\r\n            },()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.unpauseSounds();\r\n                resumeAllDelayedCalls();\r\n                setPageBackground(\"bg-australia\");\r\n            });\r\n            this.add(this.areYouSureWindow);\r\n        }\r\n\r\n        public showCompleteWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let completeWindow: CompleteWindow = new CompleteWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(completeWindow);\r\n                this.showInstructionPage();\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(2500, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(completeWindow);\r\n                completeWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public showLoseWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            this.timerEvent.destroy();\r\n\r\n            let tryAgainWindow: TryAgainWindow = new TryAgainWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(tryAgainWindow);\r\n                this.showInstructionPage();\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(3000, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(tryAgainWindow);\r\n                tryAgainWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public setInputEnabled(enabled: boolean): void {\r\n            if (enabled) {\r\n                for (let a of this.words) a.setInteractive({cursor: 'pointer'});\r\n            } else {\r\n                for (let a of this.words) a.disableInteractive();\r\n            }\r\n        }\r\n\r\n        public pauseSounds():void {\r\n            this.scene.sound.pauseAll();\r\n        }\r\n\r\n        public unpauseSounds():void {\r\n            this.scene.sound.resumeAll();\r\n        }\r\n\r\n        public destroyGameplay():void {\r\n            this.setInputEnabled(false);\r\n            this.remove(this.gameplayContainer);\r\n            this.scene.sound.stopAll();\r\n            destroyAllDelayedCalls();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class InstructionPage extends Phaser.GameObjects.Container {\r\n\r\n        private _instructionPage: Phaser.GameObjects.Image;\r\n        private _instructionPageTitle: Phaser.GameObjects.Image;\r\n        private _btnPlay: Phaser.GameObjects.Image;\r\n        private _btnSoundInstruction: Phaser.GameObjects.Image;\r\n        private instrTxt: Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onPlayClick:(target)=>void, onSndClick:(target)=>void) {\r\n            super(scene);\r\n\r\n            this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0-105, 0-48, 'Instructions page  ALL ACTIVITY  TITLEs');\r\n            this._instructionPage.setOrigin(0, 0);\r\n            this._instructionPage.setInteractive();\r\n\r\n            this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'pop-the-bubbles-title');\r\n            this._instructionPageTitle.setScale(0.65);\r\n\r\n            this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\r\n            this._btnPlay.setInteractive({cursor: 'pointer'});\r\n            this._btnPlay.once('pointerup', onPlayClick);\r\n            setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\r\n\r\n            this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Help Salty Turtle pop all the word bubbles.\\nListen to the word and tap on the bubble.\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 30,\r\n                \"color\": \"#43425D\",\r\n                \"align\": 'center'\r\n            });\r\n            this.instrTxt.setOrigin(0.5, 0.5);\r\n            this.instrTxt.setWordWrapWidth(710);\r\n            this.instrTxt.setLineSpacing(10);\r\n\r\n            this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\r\n            this._btnSoundInstruction.setInteractive({cursor: 'pointer'});\r\n            this._btnSoundInstruction.on('pointerup', onSndClick);\r\n            this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\r\n            setupButtonTextureBased(this._btnSoundInstruction, 'Sound','Sound HOVER EFFECT');\r\n\r\n            this.add(this._instructionPage);\r\n            this.add(this._instructionPageTitle);\r\n            this.add(this.instrTxt);\r\n            this.add(this._btnPlay);\r\n            this.add(this._btnSoundInstruction);\r\n        }\r\n    }\r\n}"]}